//The global script scope
def ctx = context(scope: scriptScope())

//What things can be on the script scope
contributor(ctx) {
    method(name: 'pipeline', type: 'Object', params: [body: Closure])
    method(name: 'parallel', type: 'Object', namedParams: [parameter(name: 'closures', type: 'java.util.Map'), parameter(name: 'failFast', type: 'boolean'), ], doc: 'Execute in parallel')
    method(name: 'acceptGitLabMR', type: 'Object', params: [:], doc: 'Accept GitLab Merge Request')
    method(name: 'acceptGitLabMR', type: 'Object', namedParams: [parameter(name: 'mergeCommitMessage', type: 'java.lang.String'), parameter(name: 'removeSourceBranch', type: 'boolean'), parameter(name: 'useMRDescription', type: 'boolean'), ], doc: 'Accept GitLab Merge Request')
    method(name: 'addBadge', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Badge')
    method(name: 'addErrorBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Error Badge')
    method(name: 'addErrorBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Error Badge')
    method(name: 'addGitLabMRComment', type: 'Object', params: [:], doc: 'Add comment on GitLab Merge Request')
    method(name: 'addGitLabMRComment', type: 'Object', namedParams: [parameter(name: 'comment', type: 'java.lang.String'), ], doc: 'Add comment on GitLab Merge Request')
    method(name: 'addHtmlBadge', type: 'Object', params: [html:'java.lang.String'], doc: 'Add a html badge Text')
    method(name: 'addHtmlBadge', type: 'Object', namedParams: [parameter(name: 'html', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Add a html badge Text')
    method(name: 'addInfoBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Info Badge')
    method(name: 'addInfoBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Info Badge')
    method(name: 'addShortText', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Short Text')
    method(name: 'addShortText', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'background', type: 'java.lang.String'), parameter(name: 'border', type: 'java.lang.Integer'), parameter(name: 'borderColor', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Short Text')
    method(name: 'addWarningBadge', type: 'Object', params: [text:'java.lang.String'], doc: 'Add Warning Badge')
    method(name: 'addWarningBadge', type: 'Object', namedParams: [parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'link', type: 'java.lang.String'), ], doc: 'Add Warning Badge')
    method(name: 'build', type: 'Object', params: [job:'java.lang.String'], doc: 'Build a job')
    method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'), ], doc: 'Build a job')
    method(name: 'catchError', type: 'Object', params: [body:'Closure'], doc: 'Catch error and set build result to failure')
    method(name: 'catchError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'buildResult', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'stageResult', type: 'java.lang.String'), ], doc: 'Catch error and set build result to failure')
    method(name: 'checkGatingStatus', type: 'Object', params: [environmentId:'java.lang.String'], doc: 'Atlassian Jira Service Desk Software Cloud Jenkins Integration (Deployment Gating)')
    method(name: 'checkGatingStatus', type: 'Object', namedParams: [parameter(name: 'environmentId', type: 'java.lang.String'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'Atlassian Jira Service Desk Software Cloud Jenkins Integration (Deployment Gating)')
    method(name: 'createSummary', type: 'Object', params: [icon:'java.lang.String'], doc: 'Print Message')
    method(name: 'createSummary', type: 'Object', namedParams: [parameter(name: 'icon', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), ], doc: 'Print Message')
    method(name: 'echo', type: 'Object', params: [message:'java.lang.String'], doc: 'Print Message')
    method(name: 'emailext', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'attachLog', type: 'boolean'), parameter(name: 'attachmentsPattern', type: 'java.lang.String'), parameter(name: 'compressLog', type: 'boolean'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'postsendScript', type: 'java.lang.String'), parameter(name: 'presendScript', type: 'java.lang.String'), parameter(name: 'recipientProviders', type: 'java.util.List'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'saveOutput', type: 'boolean'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Extended Email')
    method(name: 'emailextrecipients', type: 'Object', params: [recipientProviders:'java.util.List'], doc: 'Extended Email Recipients')
    method(name: 'error', type: 'Object', params: [message:'java.lang.String'], doc: 'Error signal')
    method(name: 'findBuildScans', type: 'Object', params: [:], doc: 'Find published build scans')
    method(name: 'getHighestSemanticVersion', type: 'Object', params: [:], doc: 'Get the highest version, determined by tags in repo. Also tag available as \'.findTag().orElse(\"\")\'.')
    method(name: 'getHighestSemanticVersion', type: 'Object', namedParams: [parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'Get the highest version, determined by tags in repo. Also tag available as \'.findTag().orElse(\"\")\'.')
    method(name: 'getNextSemanticVersion', type: 'Object', params: [:], doc: 'Next semantic version based on tags and conventional commits in Git repository')
    method(name: 'getNextSemanticVersion', type: 'Object', namedParams: [parameter(name: 'from', type: 'Map'), parameter(name: 'majorPattern', type: 'java.lang.String'), parameter(name: 'minorPattern', type: 'java.lang.String'), parameter(name: 'patchPattern', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'to', type: 'Map'), ], doc: 'Next semantic version based on tags and conventional commits in Git repository')
    method(name: 'gitChangelog', type: 'Object', params: [:], doc: 'Changelog from Git repository')
    method(name: 'gitChangelog', type: 'Object', namedParams: [parameter(name: 'customIssues', type: 'java.util.List'), parameter(name: 'dateFormat', type: 'java.lang.String'), parameter(name: 'extendedVariables', type: 'java.util.List'), parameter(name: 'from', type: 'Map'), parameter(name: 'gitHub', type: 'Map'), parameter(name: 'gitLab', type: 'Map'), parameter(name: 'ignoreCommitsIfMessageMatches', type: 'java.lang.String'), parameter(name: 'ignoreCommitsIfOlderThan', type: 'java.lang.String'), parameter(name: 'ignoreCommitsWithoutIssue', type: 'java.lang.Boolean'), parameter(name: 'ignoreTagsIfNameMatches', type: 'java.lang.String'), parameter(name: 'javascriptHelper', type: 'java.lang.String'), parameter(name: 'jira', type: 'Map'), parameter(name: 'noIssueName', type: 'java.lang.String'), parameter(name: 'readableTagName', type: 'java.lang.String'), parameter(name: 'redmine', type: 'Map'), parameter(name: 'removeIssueFromMessage', type: 'java.lang.Boolean'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'returnType', type: 'Map'), parameter(name: 'template', type: 'java.lang.String'), parameter(name: 'timeZone', type: 'java.lang.String'), parameter(name: 'to', type: 'Map'), parameter(name: 'untaggedName', type: 'java.lang.String'), ], doc: 'Changelog from Git repository')
    method(name: 'gitlabBuilds', type: 'Object', params: [body:'Closure'], doc: 'Notify gitlab about pending builds')
    method(name: 'gitlabBuilds', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'builds', type: 'java.util.List'), ], doc: 'Notify gitlab about pending builds')
    method(name: 'gitlabCommitStatus', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Update the commit status in GitLab depending on the build status')
    method(name: 'gitlabCommitStatus', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'builds', type: 'java.util.List'), parameter(name: 'connection', type: 'Map'), ], doc: 'Update the commit status in GitLab depending on the build status')
    method(name: 'input', type: 'Object', params: [message:'java.lang.String'], doc: 'Wait for interactive input')
    method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'java.util.List'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'), ], doc: 'Wait for interactive input')
    method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
    method(name: 'jiraAddComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Comment')
    method(name: 'jiraAddWatcher', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Add Watcher')
    method(name: 'jiraAssignIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'userName', type: 'java.lang.String'), parameter(name: 'accountId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Assign Issue')
    method(name: 'jiraAssignableUserSearch', type: 'Object', namedParams: [parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Searches assignable JIRA Users by username, name or email address for the given project/issueKey')
    method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), ], doc: 'Jira: Add a comment to issue(s)')
    method(name: 'jiraDeleteAttachment', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete Attachment')
    method(name: 'jiraDeleteAttachment', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Attachment')
    method(name: 'jiraDeleteIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Delete IssueLink')
    method(name: 'jiraDeleteIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete IssueLink')
    method(name: 'jiraDeleteIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Link by linkId.')
    method(name: 'jiraDeleteIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Delete Issue\'s Remote Links by globalId.')
    method(name: 'jiraDownloadAttachment', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'override', type: 'boolean'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Download a file to workspace (directory is optional)')
    method(name: 'jiraEditComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue Comment')
    method(name: 'jiraEditComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'component', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Component')
    method(name: 'jiraEditIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'issue', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Issue')
    method(name: 'jiraEditVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Edit Version')
    method(name: 'jiraGetAttachmentInfo', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Attachment Info')
    method(name: 'jiraGetAttachmentInfo', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Attachment Info')
    method(name: 'jiraGetComment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'commentId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comment')
    method(name: 'jiraGetComments', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Comments')
    method(name: 'jiraGetComments', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Comments')
    method(name: 'jiraGetComponent', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component')
    method(name: 'jiraGetComponent', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component')
    method(name: 'jiraGetComponentIssueCount', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Component Issue Count')
    method(name: 'jiraGetComponentIssueCount', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Component Issue Count')
    method(name: 'jiraGetFields', type: 'Object', params: [:], doc: 'JIRA Steps: Get Fields')
    method(name: 'jiraGetFields', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Fields')
    method(name: 'jiraGetIssue', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue')
    method(name: 'jiraGetIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue')
    method(name: 'jiraGetIssueLink', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get IssueLink')
    method(name: 'jiraGetIssueLink', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get IssueLink')
    method(name: 'jiraGetIssueLinkTypes', type: 'Object', params: [:], doc: 'JIRA Steps: Get Issue Link Types')
    method(name: 'jiraGetIssueLinkTypes', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Link Types')
    method(name: 'jiraGetIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'linkId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Link by linkId.')
    method(name: 'jiraGetIssueRemoteLinks', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'globalId', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue\'s Remote Links by globalId.')
    method(name: 'jiraGetIssueTransitions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Transitions')
    method(name: 'jiraGetIssueTransitions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Transitions')
    method(name: 'jiraGetIssueWatches', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Issue Watches')
    method(name: 'jiraGetIssueWatches', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Issue Watches')
    method(name: 'jiraGetProject', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project')
    method(name: 'jiraGetProject', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project')
    method(name: 'jiraGetProjectComponents', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Components')
    method(name: 'jiraGetProjectComponents', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Components')
    method(name: 'jiraGetProjectStatuses', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Statuses')
    method(name: 'jiraGetProjectStatuses', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Statuses')
    method(name: 'jiraGetProjectVersions', type: 'Object', params: [idOrKey:'java.lang.String'], doc: 'JIRA Steps: Get Project Versions')
    method(name: 'jiraGetProjectVersions', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Project Versions')
    method(name: 'jiraGetProjects', type: 'Object', params: [:], doc: 'JIRA Steps: Get Projects')
    method(name: 'jiraGetProjects', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Projects')
    method(name: 'jiraGetServerInfo', type: 'Object', params: [:], doc: 'JIRA Steps: Get Server Info')
    method(name: 'jiraGetServerInfo', type: 'Object', namedParams: [parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Server Info')
    method(name: 'jiraGetVersion', type: 'Object', params: [id:'java.lang.String'], doc: 'JIRA Steps: Get Version')
    method(name: 'jiraGetVersion', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Get Version')
    method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'Jira: Issue selector')
    method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'), ], doc: 'Jira: Issue selector')
    method(name: 'jiraJqlSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'JIRA Steps: JQL Search')
    method(name: 'jiraJqlSearch', type: 'Object', namedParams: [parameter(name: 'jql', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'fields', type: 'java.lang.Object'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: JQL Search')
    method(name: 'jiraLinkIssues', type: 'Object', namedParams: [parameter(name: 'type', type: 'java.lang.String'), parameter(name: 'inwardKey', type: 'java.lang.String'), parameter(name: 'outwardKey', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Link Issues')
    method(name: 'jiraNewComponent', type: 'Object', params: [component:'java.lang.Object'], doc: 'JIRA Steps: Create New Component')
    method(name: 'jiraNewComponent', type: 'Object', namedParams: [parameter(name: 'component', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Component')
    method(name: 'jiraNewIssue', type: 'Object', params: [issue:'Map'], doc: 'JIRA Steps: Create New Issue')
    method(name: 'jiraNewIssue', type: 'Object', namedParams: [parameter(name: 'issue', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issue')
    method(name: 'jiraNewIssueRemoteLink', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'remoteLink', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create new remote link for given issue.')
    method(name: 'jiraNewIssues', type: 'Object', params: [issues:'Map'], doc: 'JIRA Steps: Create New Issues')
    method(name: 'jiraNewIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Issues')
    method(name: 'jiraNewVersion', type: 'Object', params: [version:'java.lang.Object'], doc: 'JIRA Steps: Create New Version')
    method(name: 'jiraNewVersion', type: 'Object', namedParams: [parameter(name: 'version', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Create New Version')
    method(name: 'jiraNotifyIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'notify', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Notify Issue')
    method(name: 'jiraSearch', type: 'Object', params: [jql:'java.lang.String'], doc: 'Jira: Search issues')
    method(name: 'jiraSendBuildInfo', type: 'Object', params: [:], doc: 'Atlassian Jira Software Cloud Jenkins Integration (Build)')
    method(name: 'jiraSendBuildInfo', type: 'Object', namedParams: [parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'Atlassian Jira Software Cloud Jenkins Integration (Build)')
    method(name: 'jiraSendDeploymentInfo', type: 'Object', params: [:], doc: 'Atlassian Jira Software Cloud Jenkins Integration (Deployment)')
    method(name: 'jiraSendDeploymentInfo', type: 'Object', namedParams: [parameter(name: 'environmentId', type: 'java.lang.String'), parameter(name: 'environmentName', type: 'java.lang.String'), parameter(name: 'environmentType', type: 'java.lang.String'), parameter(name: 'enableGating', type: 'java.lang.Boolean'), parameter(name: 'issueKeys', type: 'java.util.List'), parameter(name: 'serviceIds', type: 'java.util.List'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'state', type: 'java.lang.String'), ], doc: 'Atlassian Jira Software Cloud Jenkins Integration (Deployment)')
    method(name: 'jiraTransitionIssue', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'input', type: 'java.lang.Object'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Transition Issue')
    method(name: 'jiraUploadAttachment', type: 'Object', namedParams: [parameter(name: 'idOrKey', type: 'java.lang.String'), parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), ], doc: 'JIRA Steps: Attach a file from workspace to an issue')
    method(name: 'jiraUserSearch', type: 'Object', params: [queryStr:'java.lang.String'], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
    method(name: 'jiraUserSearch', type: 'Object', namedParams: [parameter(name: 'queryStr', type: 'java.lang.String'), parameter(name: 'auditLog', type: 'boolean'), parameter(name: 'failOnError', type: 'boolean'), parameter(name: 'maxResults', type: 'int'), parameter(name: 'queryParams', type: 'java.util.Map'), parameter(name: 'site', type: 'java.lang.String'), parameter(name: 'startAt', type: 'int'), ], doc: 'JIRA Steps: Search Active JIRA Users by username, name or email address.')
    method(name: 'library', type: 'Object', params: [identifier:'java.lang.String'], doc: 'Load a shared library on the fly')
    method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'), ], doc: 'Load a shared library on the fly')
    method(name: 'libraryResource', type: 'Object', params: [resource:'java.lang.String'], doc: 'Load a resource file from a shared library')
    method(name: 'libraryResource', type: 'Object', namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), ], doc: 'Load a resource file from a shared library')
    method(name: 'lock', type: 'Object', params: [resource:java.lang.String, body:'Closure'], doc: 'Lock shared resource')
    method(name: 'lock', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'resource', type: 'java.lang.String'), parameter(name: 'extra', type: 'java.util.List'), parameter(name: 'inversePrecedence', type: 'boolean'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'quantity', type: 'int'), parameter(name: 'skipIfLocked', type: 'boolean'), parameter(name: 'variable', type: 'java.lang.String'), ], doc: 'Lock shared resource')
    method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'), ], doc: 'Mail')
    method(name: 'milestone', type: 'Object', params: [ordinal:'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'), parameter(name: 'unsafe', type: 'boolean'), ], doc: 'The milestone step forces all builds to go through in order')
    method(name: 'node', type: 'Object', params: [label:java.lang.String, body:'Closure'], doc: 'Allocate node')
    method(name: 'office365ConnectorSend', type: 'Object', params: [webhookUrl:'java.lang.String'], doc: 'Send job status notifications to Office 365 (e.g. Microsoft Teams or Outlook)')
    method(name: 'office365ConnectorSend', type: 'Object', namedParams: [parameter(name: 'webhookUrl', type: 'java.lang.String'), parameter(name: 'color', type: 'java.lang.String'), parameter(name: 'factDefinitions', type: 'java.util.List'), parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), ], doc: 'Send job status notifications to Office 365 (e.g. Microsoft Teams or Outlook)')
    method(name: 'properties', type: 'Object', params: [properties:'java.util.List'], doc: 'Set job properties')
    method(name: 'publishChecks', type: 'Object', params: [:], doc: 'Publish customized checks to SCM platforms')
    method(name: 'publishChecks', type: 'Object', namedParams: [parameter(name: 'actions', type: 'java.util.List'), parameter(name: 'annotations', type: 'java.util.List'), parameter(name: 'conclusion', type: 'Map'), parameter(name: 'detailsURL', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'status', type: 'Map'), parameter(name: 'summary', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'title', type: 'java.lang.String'), ], doc: 'Publish customized checks to SCM platforms')
    method(name: 'readTrusted', type: 'Object', params: [path:'java.lang.String'], doc: 'Read trusted file from SCM')
    method(name: 'removeBadges', type: 'Object', params: [:], doc: 'Remove Badges')
    method(name: 'removeBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Badges')
    method(name: 'removeHtmlBadges', type: 'Object', params: [:], doc: 'Remove Html Badges')
    method(name: 'removeHtmlBadges', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Html Badges')
    method(name: 'removeSummaries', type: 'Object', params: [:], doc: 'Remove Summaries')
    method(name: 'removeSummaries', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), ], doc: 'Remove Summaries')
    method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'java.util.List'), parameter(name: 'ignoreErrors', type: 'boolean'), ], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
    method(name: 'retry', type: 'Object', params: [count:int, body:'Closure'], doc: 'Retry the body up to N times')
    method(name: 'script', type: 'Object', params: [body:'Closure'], doc: 'Run arbitrary Pipeline script')
    method(name: 'sleep', type: 'Object', params: [time:'int'], doc: 'Sleep')
    method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Sleep')
    method(name: 'stage', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Stage')
    method(name: 'stage', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'), ], doc: 'Stage')
    method(name: 'step', type: 'Object', params: [delegate:'Map'], doc: 'General Build Step')
    method(name: 'timeout', type: 'Object', params: [time:int, body:'Closure'], doc: 'Enforce time limit')
    method(name: 'timeout', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'activity', type: 'boolean'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'), ], doc: 'Enforce time limit')

    method(name: 'timestamps', type: 'Object', params: [body:'Closure'], doc: '\u6642\u9593\u6233\u8A18')
    method(name: 'tool', type: 'Object', params: [name:'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'), ], doc: 'Use a tool from a predefined Tool Installation')
    method(name: 'unstable', type: 'Object', params: [message:'java.lang.String'], doc: 'Set stage result to unstable')
    method(name: 'updateGitlabCommitStatus', type: 'Object', params: [:], doc: 'Update the commit status in GitLab')
    method(name: 'updateGitlabCommitStatus', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'state', type: 'Map'), ], doc: 'Update the commit status in GitLab')
    method(name: 'waitUntil', type: 'Object', params: [body:'Closure'], doc: 'Wait for condition')
    method(name: 'waitUntil', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'initialRecurrencePeriod', type: 'long'), parameter(name: 'quiet', type: 'boolean'), ], doc: 'Wait for condition')
    method(name: 'warnError', type: 'Object', params: [message:java.lang.String, body:'Closure'], doc: 'Catch error and set build and stage result to unstable')
    method(name: 'warnError', type: 'Object', params: [body:Closure], namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'catchInterruptions', type: 'boolean'), ], doc: 'Catch error and set build and stage result to unstable')
    method(name: 'withChecks', type: 'Object', params: [name:java.lang.String, body:'Closure'], doc: 'Inject checks properties into its closure')
    method(name: 'withCredentials', type: 'Object', params: [bindings:java.util.List, body:'Closure'], doc: 'Bind credentials to variables')
    method(name: 'withEnv', type: 'Object', params: [overrides:java.util.List, body:'Closure'], doc: 'Set environment variables')
    method(name: 'wrap', type: 'Object', params: [delegate:Map, body:'Closure'], doc: 'General Build Wrapper')
    method(name: 'ws', type: 'Object', params: [dir:java.lang.String, body:'Closure'], doc: 'Allocate workspace')
    method(name: 'ArtifactoryGradleBuild', type: 'Object', namedParams: [parameter(name: 'gradleBuild', type: 'Map'), parameter(name: 'rootDir', type: 'java.lang.String'), parameter(name: 'buildFile', type: 'java.lang.String'), parameter(name: 'tasks', type: 'java.lang.String'), parameter(name: 'switches', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory gradle')
    method(name: 'MavenDescriptorStep', type: 'Object', namedParams: [parameter(name: 'pomFile', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'versionPerModule', type: 'java.util.Map'), parameter(name: 'failOnSnapshot', type: 'boolean'), parameter(name: 'dryRun', type: 'boolean'), ], doc: 'Get Artifactory Maven descriptor')
    method(name: 'addInteractivePromotion', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'displayName', type: 'java.lang.String'), ], doc: 'Add interactive promotion')
    method(name: 'artifactoryBuildTrigger', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'paths', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), ], doc: 'Trigger Artifactory build')
    method(name: 'artifactoryDistributeBuild', type: 'Object', namedParams: [parameter(name: 'distributionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Distribute build')
    method(name: 'artifactoryDownload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'server', type: 'Map'), ], doc: 'Download artifacts')
    method(name: 'artifactoryEditProps', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'props', type: 'java.lang.String'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'server', type: 'Map'), parameter(name: 'editType', type: 'Map'), ], doc: 'Edit properties')
    method(name: 'artifactoryGoPublish', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'goBuild', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), ], doc: 'Run Artifactory Go Publish command')
    method(name: 'artifactoryGoRun', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'goBuild', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'goCmdArgs', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), ], doc: 'Run Artifactory Go command')
    method(name: 'artifactoryMavenBuild', type: 'Object', namedParams: [parameter(name: 'mavenBuild', type: 'Map'), parameter(name: 'pom', type: 'java.lang.String'), parameter(name: 'goals', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'run Artifactory maven')
    method(name: 'artifactoryNpmCi', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'npmBuild', type: 'Map'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), ], doc: 'Run Artifactory npm ci')
    method(name: 'artifactoryNpmInstall', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'npmBuild', type: 'Map'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), ], doc: 'Run Artifactory npm install')
    method(name: 'artifactoryNpmPublish', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'npmBuild', type: 'Map'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), ], doc: 'Run Artifactory npm publish')
    method(name: 'artifactoryNugetRun', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'nugetBuild', type: 'Map'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), ], doc: 'Run Artifactory NuGet')
    method(name: 'artifactoryPipRun', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'pipBuild', type: 'Map'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'envActivation', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), ], doc: 'Run Artifactory pip install')
    method(name: 'artifactoryPromoteBuild', type: 'Object', namedParams: [parameter(name: 'promotionConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Promote build')
    method(name: 'artifactoryUpload', type: 'Object', namedParams: [parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'server', type: 'Map'), ], doc: 'Upload artifacts')
    method(name: 'buildAppend', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'server', type: 'Map'), ], doc: 'Build append')
    method(name: 'collectEnv', type: 'Object', params: [env:'Map'], doc: 'Advanced/Deprecated Collect environment variables and system properties')
    method(name: 'collectIssues', type: 'Object', namedParams: [parameter(name: 'issues', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'config', type: 'java.lang.String'), ], doc: 'Collect issues from git and add them to a build')
    method(name: 'conanAddRemote', type: 'Object', namedParams: [parameter(name: 'serverUrl', type: 'java.lang.String'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), parameter(name: 'force', type: 'boolean'), parameter(name: 'verifySSL', type: 'boolean'), ], doc: 'Add new repo to Conan config')
    method(name: 'conanAddUser', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'serverName', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), ], doc: 'Add new user to Conan config')
    method(name: 'createDockerBuildStep', type: 'Object', namedParams: [parameter(name: 'kanikoImageFile', type: 'java.lang.String'), parameter(name: 'jibImageFiles', type: 'java.lang.String'), parameter(name: 'sourceRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'javaArgs', type: 'java.lang.String'), ], doc: 'Artifactory create Docker build')
    method(name: 'createReleaseBundle', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'storingRepo', type: 'java.lang.String'), parameter(name: 'signImmediately', type: 'boolean'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'gpgPassphrase', type: 'java.lang.String'), parameter(name: 'releaseNotesPath', type: 'java.lang.String'), parameter(name: 'releaseNotesSyntax', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), ], doc: 'Create a release bundle ')
    method(name: 'deleteReleaseBundle', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'sync', type: 'boolean'), parameter(name: 'deleteFromDist', type: 'boolean'), parameter(name: 'distRules', type: 'java.lang.String'), parameter(name: 'countryCodes', type: 'java.util.List'), parameter(name: 'siteName', type: 'java.lang.String'), parameter(name: 'cityName', type: 'java.lang.String'), ], doc: 'Delete a release bundle')
    method(name: 'deployArtifacts', type: 'Object', namedParams: [parameter(name: 'deployer', type: 'Map'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Deploy artifacts')
    method(name: 'distributeReleaseBundle', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'sync', type: 'boolean'), parameter(name: 'distRules', type: 'java.lang.String'), parameter(name: 'countryCodes', type: 'java.util.List'), parameter(name: 'siteName', type: 'java.lang.String'), parameter(name: 'cityName', type: 'java.lang.String'), ], doc: 'Distribute a release bundle')
    method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId:'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
    method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'), ], doc: 'Record trace of a Docker image run in a container')
    method(name: 'dockerPullStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'sourceRepo', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Artifactory docker pull')
    method(name: 'dockerPushStep', type: 'Object', namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'properties', type: 'Map'), parameter(name: 'server', type: 'Map'), parameter(name: 'javaArgs', type: 'java.lang.String'), ], doc: 'Artifactory docker push')
    method(name: 'dsCreateReleaseBundle', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'gpgPassphrase', type: 'java.lang.String'), parameter(name: 'releaseNotesPath', type: 'java.lang.String'), parameter(name: 'releaseNotesSyntax', type: 'java.lang.String'), parameter(name: 'signImmediately', type: 'boolean'), parameter(name: 'specPath', type: 'java.lang.String'), parameter(name: 'storingRepo', type: 'java.lang.String'), ], doc: 'Create release bundle')
    method(name: 'dsDeleteReleaseBundle', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'cityName', type: 'java.lang.String'), parameter(name: 'countryCodes', type: 'java.util.List'), parameter(name: 'deleteFromDist', type: 'boolean'), parameter(name: 'distRules', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'siteName', type: 'java.lang.String'), parameter(name: 'sync', type: 'boolean'), ], doc: 'Delete a release bundle')
    method(name: 'dsDistributeReleaseBundle', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'cityName', type: 'java.lang.String'), parameter(name: 'countryCodes', type: 'java.util.List'), parameter(name: 'distRules', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'siteName', type: 'java.lang.String'), parameter(name: 'sync', type: 'boolean'), ], doc: 'Distribute a release bundle')
    method(name: 'dsSignReleaseBundle', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'gpgPassphrase', type: 'java.lang.String'), parameter(name: 'storingRepo', type: 'java.lang.String'), ], doc: 'Sign a release bundle')
    method(name: 'dsUpdateReleaseBundle', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'gpgPassphrase', type: 'java.lang.String'), parameter(name: 'releaseNotesPath', type: 'java.lang.String'), parameter(name: 'releaseNotesSyntax', type: 'java.lang.String'), parameter(name: 'signImmediately', type: 'boolean'), parameter(name: 'specPath', type: 'java.lang.String'), parameter(name: 'storingRepo', type: 'java.lang.String'), ], doc: 'Update a release bundle')
    method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'), ], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
    method(name: 'getArtifactoryServer', type: 'Object', params: [artifactoryServerID:'java.lang.String'], doc: 'Advanced/Deprecated Get Artifactory server from Jenkins config')
    method(name: 'getContext', type: 'Object', params: [type:'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
    method(name: 'getJFrogPlatformInstance', type: 'Object', params: [instanceId:'java.lang.String'], doc: 'Advanced/Deprecated Get JFrog Platform instance from Jenkins config')
    method(name: 'initConanClient', type: 'Object', params: [client:'Map'], doc: 'Advanced/Deprecated Create Conan Client')
    method(name: 'jfPipelines', type: 'Object', params: [:], doc: 'Advanced/Deprecated Set output resources and report results for JFrog Pipelines')
    method(name: 'jfPipelines', type: 'Object', namedParams: [parameter(name: 'outputResources', type: 'java.lang.String'), parameter(name: 'reportStatus', type: 'java.lang.String'), ], doc: 'Set output resources and report results for JFrog Pipelines')
    method(name: 'jfrogInstance', type: 'Object', params: [id:'java.lang.String'], doc: 'Advanced/Deprecated Creates new JFrog instance')
    method(name: 'jfrogInstance', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'artifactoryUrl', type: 'java.lang.String'), parameter(name: 'bypassProxy', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'deploymentThreads', type: 'int'), parameter(name: 'distributionUrl', type: 'java.lang.String'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'retry', type: 'int'), parameter(name: 'timeout', type: 'int'), parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), ], doc: 'Creates new JFrog instance')
    method(name: 'newArtifactoryServer', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Returns new Artifactory server')
    method(name: 'newBuildInfo', type: 'Object', params: [:], doc: 'Advanced/Deprecated New buildInfo')
    method(name: 'newGoBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory Go')
    method(name: 'newGradleBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory gradle executor')
    method(name: 'newJFrogPlatformInstance', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'artifactoryUrl', type: 'java.lang.String'), parameter(name: 'distributionUrl', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'credentialsId', type: 'java.lang.String'), ], doc: 'Returns new JFrog platform instance')
    method(name: 'newMavenBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory maven')
    method(name: 'newNpmBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory npm executor')
    method(name: 'newNugetBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory NuGet executor')
    method(name: 'newPipBuild', type: 'Object', params: [:], doc: 'Advanced/Deprecated New Artifactory pip executor')
    method(name: 'publishBuildInfo', type: 'Object', namedParams: [parameter(name: 'buildInfo', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Publish build Info to Artifactory')
    method(name: 'rtAddInteractivePromotion', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Add interactive promotion')
    method(name: 'rtAddInteractivePromotion', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'copy', type: 'boolean'), parameter(name: 'displayName', type: 'java.lang.String'), parameter(name: 'failFast', type: 'boolean'), parameter(name: 'includeDependencies', type: 'boolean'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'sourceRepo', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), ], doc: 'Add interactive promotion')
    method(name: 'rtBuildAppend', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'appendBuildName', type: 'java.lang.String'), parameter(name: 'appendBuildNumber', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), ], doc: 'Build append')
    method(name: 'rtBuildInfo', type: 'Object', params: [:], doc: 'Advanced/Deprecated Create build info')
    method(name: 'rtBuildInfo', type: 'Object', namedParams: [parameter(name: 'asyncBuildRetention', type: 'boolean'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'captureEnv', type: 'boolean'), parameter(name: 'deleteBuildArtifacts', type: 'boolean'), parameter(name: 'doNotDiscardBuilds', type: 'java.util.List'), parameter(name: 'excludeEnvPatterns', type: 'java.util.List'), parameter(name: 'includeEnvPatterns', type: 'java.util.List'), parameter(name: 'maxBuilds', type: 'int'), parameter(name: 'maxDays', type: 'int'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'startDate', type: 'java.util.Date'), ], doc: 'Create build info')
    method(name: 'rtBuildTrigger', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'paths', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), ], doc: 'Trigger Artifactory build')
    method(name: 'rtCollectIssues', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Collect issues')
    method(name: 'rtCollectIssues', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'config', type: 'java.lang.String'), parameter(name: 'configPath', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), ], doc: 'Collect issues')
    method(name: 'rtConanClient', type: 'Object', params: [id:'java.lang.String'], doc: 'Advanced/Deprecated Creates new Conan client')
    method(name: 'rtConanClient', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'userHome', type: 'java.lang.String'), ], doc: 'Creates new Conan client')
    method(name: 'rtConanRemote', type: 'Object', namedParams: [parameter(name: 'clientId', type: 'java.lang.String'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'force', type: 'boolean'), parameter(name: 'verifySSL', type: 'boolean'), ], doc: 'Add new repo to Conan config')
    method(name: 'rtConanRun', type: 'Object', namedParams: [parameter(name: 'clientId', type: 'java.lang.String'), parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), ], doc: 'Run a Conan command')
    method(name: 'rtCreateDockerBuild', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'sourceRepo', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'jibImageFiles', type: 'java.lang.String'), parameter(name: 'kanikoImageFile', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), ], doc: 'run Artifactory create Docker build')
    method(name: 'rtDeleteProps', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Delete properties')
    method(name: 'rtDeleteProps', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'props', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'specPath', type: 'java.lang.String'), ], doc: 'Delete properties')
    method(name: 'rtDockerPull', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'sourceRepo', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), ], doc: 'run Artifactory docker pull')
    method(name: 'rtDockerPush', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'host', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'properties', type: 'java.lang.String'), ], doc: 'run Artifactory docker push')
    method(name: 'rtDotnetResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'set .NET resolver')
    method(name: 'rtDotnetRun', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory .NET')
    method(name: 'rtDotnetRun', type: 'Object', namedParams: [parameter(name: 'apiProtocol', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), ], doc: 'run Artifactory .NET')
    method(name: 'rtDownload', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Download artifacts')
    method(name: 'rtDownload', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'specPath', type: 'java.lang.String'), ], doc: 'Download artifacts')
    method(name: 'rtGoDeployer', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'customBuildName', type: 'java.lang.String'), parameter(name: 'properties', type: 'java.util.List'), ], doc: 'set go deployer')
    method(name: 'rtGoPublish', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory Go publish')
    method(name: 'rtGoPublish', type: 'Object', namedParams: [parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'deployerId', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), ], doc: 'run Artifactory Go publish')
    method(name: 'rtGoResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'set Go resolver')
    method(name: 'rtGoRun', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory Go publish')
    method(name: 'rtGoRun', type: 'Object', namedParams: [parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), ], doc: 'run Artifactory Go publish')
    method(name: 'rtGradleDeployer', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'artifactPattern', type: 'java.lang.String'), parameter(name: 'customBuildName', type: 'java.lang.String'), parameter(name: 'deployIvyDescriptors', type: 'boolean'), parameter(name: 'deployMavenDescriptors', type: 'boolean'), parameter(name: 'excludePatterns', type: 'java.util.List'), parameter(name: 'includeEnvVars', type: 'boolean'), parameter(name: 'includePatterns', type: 'java.util.List'), parameter(name: 'ivyPattern', type: 'java.lang.String'), parameter(name: 'mavenCompatible', type: 'boolean'), parameter(name: 'properties', type: 'java.util.List'), parameter(name: 'publications', type: 'java.util.List'), parameter(name: 'releaseRepo', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'snapshotRepo', type: 'java.lang.String'), parameter(name: 'threads', type: 'int'), ], doc: 'set gradle deployer')
    method(name: 'rtGradleResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'set gradle resolver')
    method(name: 'rtGradleRun', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory gradle')
    method(name: 'rtGradleRun', type: 'Object', namedParams: [parameter(name: 'buildFile', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'deployerId', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), parameter(name: 'rootDir', type: 'java.lang.String'), parameter(name: 'switches', type: 'java.lang.String'), parameter(name: 'tasks', type: 'java.lang.String'), parameter(name: 'tool', type: 'java.lang.String'), parameter(name: 'useWrapper', type: 'boolean'), parameter(name: 'usesPlugin', type: 'boolean'), ], doc: 'run Artifactory gradle')
    method(name: 'rtMavenDeployer', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'releaseRepo', type: 'java.lang.String'), parameter(name: 'snapshotRepo', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'customBuildName', type: 'java.lang.String'), parameter(name: 'deployArtifacts', type: 'boolean'), parameter(name: 'deployEvenIfUnstable', type: 'boolean'), parameter(name: 'excludePatterns', type: 'java.util.List'), parameter(name: 'includeEnvVars', type: 'boolean'), parameter(name: 'includePatterns', type: 'java.util.List'), parameter(name: 'properties', type: 'java.util.List'), parameter(name: 'threads', type: 'int'), ], doc: 'set maven deployer')
    method(name: 'rtMavenResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'releaseRepo', type: 'java.lang.String'), parameter(name: 'snapshotRepo', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), ], doc: 'set maven resolver')
    method(name: 'rtMavenRun', type: 'Object', namedParams: [parameter(name: 'pom', type: 'java.lang.String'), parameter(name: 'goals', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'deployerId', type: 'java.lang.String'), parameter(name: 'opts', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), parameter(name: 'tool', type: 'java.lang.String'), parameter(name: 'useWrapper', type: 'boolean'), ], doc: 'run Artifactory maven')
    method(name: 'rtNpmCi', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory npm ci')
    method(name: 'rtNpmCi', type: 'Object', namedParams: [parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), parameter(name: 'tool', type: 'java.lang.String'), ], doc: 'run Artifactory npm ci')
    method(name: 'rtNpmDeployer', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), parameter(name: 'customBuildName', type: 'java.lang.String'), parameter(name: 'properties', type: 'java.util.List'), ], doc: 'set npm deployer')
    method(name: 'rtNpmInstall', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory npm install')
    method(name: 'rtNpmInstall', type: 'Object', namedParams: [parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), parameter(name: 'tool', type: 'java.lang.String'), ], doc: 'run Artifactory npm install')
    method(name: 'rtNpmPublish', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory npm publish')
    method(name: 'rtNpmPublish', type: 'Object', namedParams: [parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'deployerId', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'path', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'tool', type: 'java.lang.String'), ], doc: 'run Artifactory npm publish')
    method(name: 'rtNpmResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'set npm resolver')
    method(name: 'rtNugetResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'set NuGet resolver')
    method(name: 'rtNugetRun', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory NuGet')
    method(name: 'rtNugetRun', type: 'Object', namedParams: [parameter(name: 'apiProtocol', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), ], doc: 'run Artifactory NuGet')
    method(name: 'rtPipInstall', type: 'Object', params: [:], doc: 'Advanced/Deprecated run Artifactory pip install')
    method(name: 'rtPipInstall', type: 'Object', namedParams: [parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'envActivation', type: 'java.lang.String'), parameter(name: 'javaArgs', type: 'java.lang.String'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'resolverId', type: 'java.lang.String'), ], doc: 'run Artifactory pip install')
    method(name: 'rtPipResolver', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'repo', type: 'java.lang.String'), ], doc: 'set pip resolver')
    method(name: 'rtPromote', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'targetRepo', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'comment', type: 'java.lang.String'), parameter(name: 'copy', type: 'boolean'), parameter(name: 'failFast', type: 'boolean'), parameter(name: 'includeDependencies', type: 'boolean'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'sourceRepo', type: 'java.lang.String'), parameter(name: 'status', type: 'java.lang.String'), ], doc: 'Promote build')
    method(name: 'rtPublishBuildInfo', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Publish build info')
    method(name: 'rtPublishBuildInfo', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), ], doc: 'Publish build info')
    method(name: 'rtServer', type: 'Object', params: [id:'java.lang.String'], doc: 'Advanced/Deprecated Creates new Artifactory server')
    method(name: 'rtServer', type: 'Object', namedParams: [parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'bypassProxy', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'deploymentThreads', type: 'int'), parameter(name: 'password', type: 'java.lang.String'), parameter(name: 'retry', type: 'int'), parameter(name: 'timeout', type: 'int'), parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'username', type: 'java.lang.String'), ], doc: 'Creates new Artifactory server')
    method(name: 'rtSetProps', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Set properties')
    method(name: 'rtSetProps', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'props', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'specPath', type: 'java.lang.String'), ], doc: 'Set properties')
    method(name: 'rtUpload', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated Upload artifacts')
    method(name: 'rtUpload', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'failNoOp', type: 'boolean'), parameter(name: 'module', type: 'java.lang.String'), parameter(name: 'project', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'specPath', type: 'java.lang.String'), ], doc: 'Upload artifacts')
    method(name: 'runConanCommand', type: 'Object', namedParams: [parameter(name: 'command', type: 'java.lang.String'), parameter(name: 'conanHome', type: 'java.lang.String'), parameter(name: 'buildInfo', type: 'Map'), ], doc: 'Run a Conan command')
    method(name: 'signReleaseBundle', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'gpgPassphrase', type: 'java.lang.String'), parameter(name: 'storingRepo', type: 'java.lang.String'), ], doc: 'Sign a release bundle')
    method(name: 'updateReleaseBundle', type: 'Object', namedParams: [parameter(name: 'server', type: 'Map'), parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'version', type: 'java.lang.String'), parameter(name: 'spec', type: 'java.lang.String'), parameter(name: 'storingRepo', type: 'java.lang.String'), parameter(name: 'signImmediately', type: 'boolean'), parameter(name: 'dryRun', type: 'boolean'), parameter(name: 'gpgPassphrase', type: 'java.lang.String'), parameter(name: 'releaseNotesPath', type: 'java.lang.String'), parameter(name: 'releaseNotesSyntax', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String'), ], doc: 'Update a release bundle')
    method(name: 'withContext', type: 'Object', params: [context:java.lang.Object, body:'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')
    method(name: 'xrayScan', type: 'Object', params: [serverId:'java.lang.String'], doc: 'Advanced/Deprecated run Xray scan')
    method(name: 'xrayScan', type: 'Object', namedParams: [parameter(name: 'serverId', type: 'java.lang.String'), parameter(name: 'buildName', type: 'java.lang.String'), parameter(name: 'buildNumber', type: 'java.lang.String'), parameter(name: 'failBuild', type: 'boolean'), parameter(name: 'printTable', type: 'boolean'), parameter(name: 'project', type: 'java.lang.String'), ], doc: 'run Xray scan')
    method(name: 'xrayScanBuild', type: 'Object', namedParams: [parameter(name: 'xrayScanConfig', type: 'Map'), parameter(name: 'server', type: 'Map'), ], doc: 'Xray build scanning')
    property(name: 'docker', type: 'org.jenkinsci.plugins.docker.workflow.DockerDSL')
    property(name: 'pipeline', type: 'org.jenkinsci.plugins.pipeline.modeldefinition.ModelStepLoader')
    property(name: 'env', type: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')
    property(name: 'params', type: 'org.jenkinsci.plugins.workflow.cps.ParamsVariable')
    property(name: 'currentBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')
    property(name: 'scm', type: 'org.jenkinsci.plugins.workflow.multibranch.SCMVar')
    property(name: 'Artifactory', type: 'org.jfrog.hudson.pipeline.scripted.dsl.ArtifactoryDSL')
    property(name: 'JFrog', type: 'org.jfrog.hudson.pipeline.scripted.dsl.JFrogDSL')
    property(name: 'manager', type: 'org.jvnet.hudson.plugins.groovypostbuild.WorkflowManager')
}

// Define default env vars
def envVars = context(ctype: 'org.jenkinsci.plugins.workflow.cps.EnvActionImpl.Binder')

contributor(envVars) {
    property(name: 'BRANCH_NAME', type: 'String', doc: 'For a multibranch project, this will be set to the name of the branch being built, for example in case you wish to deploy to production from master but not from feature branches; if corresponding to some kind of change request, the name is generally arbitrary (refer to CHANGE_ID and CHANGE_TARGET).')
    property(name: 'CHANGE_ID', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the change ID, such as a pull request number, if supported; else unset.')
    property(name: 'CHANGE_URL', type: 'Strig', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the change URL, if supported; else unset.')
    property(name: 'CHANGE_TITLE', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the title of the change, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the username of the author of the proposed change, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR_DISPLAY_NAME', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the human name of the author, if supported; else unset.')
    property(name: 'CHANGE_AUTHOR_EMAIL', type: 'String', doc: 'For a multibranch project corresponding to some kind of change request, this will be set to the email address of the author, if supported; else unset.')
    property(name: 'CHANGE_TARGET', type: 'String', doc: 'rFo a multibranch project corresponding to some kind of change request, this will be set to the target or base branch to which the change could be merged, if supported; else unset.')
    property(name: 'BUILD_NUMBER', type: 'String', doc: 'The current build number, such as "153"')
    property(name: 'BUILD_ID', type: 'String', doc: 'The current build ID, identical to BUILD_NUMBER for builds created in 1.597+, but a YYYY-MM-DD_hh-mm-ss timestamp for older builds')
    property(name: 'BUILD_DISPLAY_NAME', type: 'String', doc: 'The display name of the current build, which is something like "#153" by default.')
    property(name: 'JOB_NAME', type: 'String', doc: 'Name of the project of this build, such as "foo" or "foo/bar".')
    property(name: 'JOB_BASE_NAME', type: 'String', doc: 'Short Name of the project of this build stripping off folder paths, such as "foo" for "bar/foo".')
    property(name: 'BUILD_TAG', type: 'String', doc: 'String of "jenkins-${JOB_NAME}-${BUILD_NUMBER}". All forward slashes (/) in the JOB_NAME are replaced with dashes (-). Convenient to put into a resource file, a jar file, etc for easier identification.')
    property(name: 'EXECUTOR_NUMBER', type: 'String', doc: 'The unique number that identifies the current executor (among executors of the same machine) that’s carrying out this build. This is the number you see in the "build executor status", except that the number starts from 0, not 1.')
    property(name: 'NODE_NAME', type: 'String', doc: 'Name of the agent if the build is on an agent, or "master" if run on master')
    property(name: 'NODE_LABELS', type: 'String', doc: 'Whitespace-separated list of labels that the node is assigned.')
    property(name: 'WORKSPACE', type: 'String', doc: 'The absolute path of the directory assigned to the build as a workspace.')
    property(name: 'JENKINS_HOME', type: 'String', doc: 'The absolute path of the directory assigned on the master node for Jenkins to store data.')
    property(name: 'JENKINS_URL', type: 'String', doc: 'Full URL of Jenkins, like http://server:port/jenkins/ (note: only available if Jenkins URL set in system configuration)')
    property(name: 'BUILD_URL', type: 'String', doc: 'Full URL of this build, like http://server:port/jenkins/job/foo/15/ (Jenkins URL must be set)')
    property(name: 'JOB_URL', type: 'String', doc: 'Full URL of this job, like http://server:port/jenkins/job/foo/ (Jenkins URL must be set)')
}

// Definew all the properties in current builds
def currentBuild = context(ctype: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder')

contributor(currentBuild) {
    property(name: 'number', type: 'Integer', doc: 'build number')
    property(name: 'result', type: 'String', doc: 'typically SUCCESS, UNSTABLE, or FAILURE (may be null for an ongoing build)')
    property(name: 'currentResult', type: 'String', doc: 'typically SUCCESS, UNSTABLE, or FAILURE (never null)')
    method(name: 'resultIsBetterOrEqualTo', type: 'Boolean', params: [buildStatus: 'String'], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is better than or equal to the provided result.')
    method(name: 'resultIsWorseOrEqualTo', type: 'Boolean', params: [buildStatus: 'String'], doc: 'Compares the current build result to the provided result string (SUCCESS, UNSTABLE, or FAILURE) and returns true if the current build result is worse than or equal to the provided result.')
    property(name: 'displayName', type: 'String', doc: 'normally #123 but sometimes set to, e.g., an SCM commit identifier')
    property(name: 'description', type: 'String', doc: 'additional information about the build')
    property(name: 'id', type: 'String', doc: 'normally number as a string')
    property(name: 'timeInMillis', type: 'long', doc: 'time since the epoch when the build was scheduled')
    property(name: 'startTimeInMillis', type: 'long', doc: 'time since the epoch when the build started running')
    property(name: 'duration', type: 'long', doc: 'duration of the build in milliseconds')
    property(name: 'durationString', type: 'String', doc: 'a human-readable representation of the build duration')
    property(name: 'previousBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder', doc: 'another similar object, or null')
    property(name: 'nextBuild', type: 'org.jenkinsci.plugins.workflow.cps.RunWrapperBinder', doc: 'another similar object, or null')
    property(name: 'absoluteUrl', type: 'String', doc: 'URL of build index page')
    property(name: 'buildVariables', type: 'Map', doc: 'for a non-Pipeline downstream build, offers access to a map of defined build variables; for a Pipeline downstream build, any variables set globally on env')
    property(name: 'changeSets', type: 'String', doc: 'a list of changesets coming from distinct SCM checkouts; each has a kind and is a list of commits; each commit has a commitId, timestamp, msg, author, and affectedFiles each of which has an editType and path; the value will not generally be Serializable so you may only access it inside a method marked @NonCPS')
    property(name: 'rawBuild', type: 'String', doc: 'a hudson.model.Run with further APIs, only for trusted libraries or administrator-approved scripts outside the sandbox; the value will not be Serializable so you may only access it inside a method marked @NonCPS')
}

def closures = context(scope: closureScope())

contributor(closures) {
    // What things can be inside a pipeline
    if (enclosingCall("pipeline")) {
        method(name: 'echo', type: 'Object', params: [message: 'java.lang.String'], doc: 'Print Message')
        method(name: 'stages', type: 'Object', params: [body: 'Closure'], doc: 'Stages')
        method(name: 'agent', type: 'Object', params: [body: 'Closure'], doc: 'Label expression to select agents')
        method(name: 'parameters', type: 'Object', params: [body: 'Closure'], doc: 'Job parameters')
        method(name: 'options', type: 'Object', params: [body: 'Closure'])
        method(name: 'triggers', type: 'Object', params: [body: 'Closure'], doc: 'Build triggers')
        method(name: 'post', type: 'Object', params: [body: 'Closure'], doc: 'Post build actions')
        method(name: 'jiraComment', type: 'Object', namedParams: [parameter(name: 'issueKey', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'),], doc: 'JIRA: Add a comment to issue(s)')
        method(name: 'jiraIssueSelector', type: 'Object', params: [:], doc: 'JIRA: Issue selector')
        method(name: 'jiraIssueSelector', type: 'Object', namedParams: [parameter(name: 'issueSelector', type: 'Map'),], doc: 'JIRA: Issue selector')
        method(name: 'jiraSearch', type: 'Object', params: [jql: 'java.lang.String'], doc: 'JIRA: Search issues')

        //I  don't know the fate of these one
        method(name: 'build', type: 'Object', params: [job: 'java.lang.String'], doc: 'Build a job')
        method(name: 'build', type: 'Object', namedParams: [parameter(name: 'job', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'propagate', type: 'boolean'), parameter(name: 'quietPeriod', type: 'java.lang.Integer'), parameter(name: 'wait', type: 'boolean'),], doc: 'Build a job')
        method(name: 'ec2', type: 'Object', namedParams: [parameter(name: 'cloud', type: 'java.lang.String'), parameter(name: 'template', type: 'java.lang.String'),], doc: 'Cloud template provisioning')
        method(name: 'error', type: 'Object', params: [message: 'java.lang.String'], doc: 'Error signal')
        method(name: 'input', type: 'Object', params: [message: 'java.lang.String'], doc: 'Wait for interactive input')
        method(name: 'input', type: 'Object', namedParams: [parameter(name: 'message', type: 'java.lang.String'), parameter(name: 'id', type: 'java.lang.String'), parameter(name: 'ok', type: 'java.lang.String'), parameter(name: 'parameters', type: 'Map'), parameter(name: 'submitter', type: 'java.lang.String'), parameter(name: 'submitterParameter', type: 'java.lang.String'),], doc: 'Wait for interactive input')
        method(name: 'isUnix', type: 'Object', params: [:], doc: 'Checks if running on a Unix-like node')
        method(name: 'library', type: 'Object', params: [identifier: 'java.lang.String'], doc: 'Load a shared library on the fly')
        method(name: 'library', type: 'Object', namedParams: [parameter(name: 'identifier', type: 'java.lang.String'), parameter(name: 'changelog', type: 'java.lang.Boolean'), parameter(name: 'retriever', type: 'Map'),], doc: 'Load a shared library on the fly')
        method(name: 'libraryResource', type: 'Object', params: [resource: 'java.lang.String'], doc: 'Load a resource file from a shared library')
        method(name: 'mail', type: 'Object', namedParams: [parameter(name: 'subject', type: 'java.lang.String'), parameter(name: 'body', type: 'java.lang.String'), parameter(name: 'bcc', type: 'java.lang.String'), parameter(name: 'cc', type: 'java.lang.String'), parameter(name: 'charset', type: 'java.lang.String'), parameter(name: 'from', type: 'java.lang.String'), parameter(name: 'mimeType', type: 'java.lang.String'), parameter(name: 'replyTo', type: 'java.lang.String'), parameter(name: 'to', type: 'java.lang.String'),], doc: 'Mail')
        method(name: 'milestone', type: 'Object', params: [ordinal: 'java.lang.Integer'], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'milestone', type: 'Object', namedParams: [parameter(name: 'ordinal', type: 'java.lang.Integer'), parameter(name: 'label', type: 'java.lang.String'),], doc: 'The milestone step forces all builds to go through in order')
        method(name: 'node', type: 'Object', params: [body: 'Closure'], doc: 'Allocate node')
        method(name: 'node', type: 'Object', params: [label: 'String', body: 'Closure'], doc: 'Allocate node')
        method(name: 'properties', type: 'Object', params: [properties: 'Map'], doc: 'Set job properties')
        method(name: 'readTrusted', type: 'Object', params: [path: 'java.lang.String'], doc: 'Read trusted file from SCM')
        method(name: 'resolveScm', type: 'Object', namedParams: [parameter(name: 'source', type: 'Map'), parameter(name: 'targets', type: 'Map'), parameter(name: 'ignoreErrors', type: 'boolean'),], doc: 'Resolves an SCM from an SCM Source and a list of candidate target branch names')
        method(name: 'retry', type: 'Object', params: [count: int, body: 'Closure'], doc: 'Retry the body up to N times')
        method(name: 'script', type: 'Object', params: [body: 'Closure'], doc: 'Run arbitrary Pipeline script')
        method(name: 'sleep', type: 'Object', params: [time: 'int'], doc: 'Sleep')
        method(name: 'sleep', type: 'Object', namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Sleep')
        method(name: 'timeout', type: 'Object', params: [time: int, body: 'Closure'], doc: 'Enforce time limit')
        method(name: 'timeout', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'time', type: 'int'), parameter(name: 'unit', type: 'java.util.concurrent.TimeUnit'),], doc: 'Enforce time limit')
        method(name: 'tool', type: 'Object', params: [name: 'java.lang.String'], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'tool', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'type', type: 'java.lang.String'),], doc: 'Use a tool from a predefined Tool Installation')
        method(name: 'waitUntil', type: 'Object', params: [body: 'Closure'], doc: 'Wait for condition')
        method(name: 'withCredentials', type: 'Object', params: [bindings: Map, body: 'Closure'], doc: 'Bind credentials to variables')
        method(name: 'withEnv', type: 'Object', params: [overrides: Map, body: 'Closure'], doc: 'Set environment variables')
        method(name: 'ws', type: 'Object', params: [dir: 'String', body: 'Closure'], doc: 'Allocate workspace')
        method(name: 'catchError', type: 'Object', params: [body: 'Closure'], doc: 'Advanced/Deprecated Catch error and set build result')
        method(name: 'dockerFingerprintRun', type: 'Object', params: [containerId: 'java.lang.String'], doc: 'Advanced/Deprecated Record trace of a Docker image run in a container')
        method(name: 'dockerFingerprintRun', type: 'Object', namedParams: [parameter(name: 'containerId', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'),], doc: 'Record trace of a Docker image run in a container')
        method(name: 'envVarsForTool', type: 'Object', namedParams: [parameter(name: 'toolId', type: 'java.lang.String'), parameter(name: 'toolVersion', type: 'java.lang.String'),], doc: 'Fetches the environment variables for a given tool in a list of \'FOO=bar\' strings suitable for the withEnv step.')
        method(name: 'getContext', type: 'Object', params: [type: 'Map'], doc: 'Advanced/Deprecated Get contextual object from internal APIs')
        method(name: 'withContext', type: 'Object', params: [context: 'Object', body: 'Closure'], doc: 'Advanced/Deprecated Use contextual object from internal APIs within a block')

    }

    //The only thing inside agent can be label
    if (enclosingCall("agent")) {
        property(name: 'any')
        property(name: 'none')
        method(name: 'label', type: 'String', params: [expr: 'String'])
        method(name: 'docker', type: 'String', params: [docker_image: 'String'])
        method(name: 'dockerfile', type: 'boolean', params: [use_dockerfile: 'boolean'])
    }

    if (enclosingCall("triggers")) {
        method(name: 'cron', type: 'String', params: [expr: 'String'], doc: 'Cron expression can be one of @daily, @hourly, etc')
        method(name: 'upstream', type: 'Object', params: [name: 'String', build_status: 'Object'])
        method(name: 'pollSCM', type: 'String', params: [expr: 'String'])
        method(name: 'bitbucketPush')
    }

    // Parameters can only contain
    if (enclosingCall("parameters")) {
        method(name: 'string', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.String'), parameter(name: 'description', type: 'java.lang.String')])
        method(name: 'booleanParam', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: 'java.lang.String')])
        method(name: 'choice', type: 'Object', namedParams: [parameter(name: 'choice', type: 'java.lang.String'), parameter(name: 'defaultValue', type: 'java.lang.Boolean'), parameter(name: 'description', type: 'java.lang.String')])
    }

    // Find the options!
    if (enclosingCall("options")) {
        method(name: 'buildDiscarder')
        method(name: 'timestamps')
        method(name: 'timeout', type: 'Object', namedParams: [parameter(name: 'time', type: 'java.lang.Integer'), parameter(name: 'unit', type: 'java.lang.String')])
    }

    // Inside stages can be, stage or stage('Name')
    if (enclosingCall("stages")) {
        method(name: 'stage', type: 'Object', params: [name: 'String', body: 'Closure'], doc: 'Stage')
        method(name: 'stage', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'concurrency', type: 'java.lang.Integer'),], doc: 'Stage')
    }

    // Inside steps only steps
    if (enclosingCall("stage")) {
        method(name: 'agent', type: 'Object', params: [body: 'Closure'], doc: 'Label expression to select agents')
        method(name: 'steps', type: 'Object', params: [body: 'Closure'], doc: 'Steps to execute on stage')
        method(name: 'post', type: 'Object', params: [body: 'Closure'], doc: 'Post actions can be executed on a per-stage basis as well')
    }

    // Only inside steps
    if (enclosingCall("steps") || enclosingCall("always") || enclosingCall("success") ||
            enclosingCall("failure") || enclosingCall("unstable") || enclosingCall("changed")) {
        method(name: 'timestamp', type: 'Object', params: [body: 'Closure'], doc: 'Timestamps')
        method(name: 'bat', type: 'Object', params: [script: 'java.lang.String'], doc: 'Windows Batch Script')
        method(name: 'bat', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'),], doc: 'Windows Batch Script')
        method(name: 'checkout', type: 'Object', params: [scm: 'Map'], doc: 'General SCM')
        method(name: 'checkout', type: 'Object', namedParams: [parameter(name: 'scm', type: 'Map'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'poll', type: 'boolean'),], doc: 'General SCM')
        method(name: 'deleteDir', type: 'Object', params: [:], doc: 'Recursively delete the current directory from the workspace')
        method(name: 'dir', type: 'Object', params: [path: 'String', body: 'Closure'], doc: 'Change current directory')
        method(name: 'fileExists', type: 'Object', params: [file: 'java.lang.String'], doc: 'Verify if file exists in workspace')
        method(name: 'git', type: 'Object', params: [url: 'java.lang.String'], doc: 'Git')
        method(name: 'git', type: 'Object', namedParams: [parameter(name: 'url', type: 'java.lang.String'), parameter(name: 'branch', type: 'java.lang.String'), parameter(name: 'changelog', type: 'boolean'), parameter(name: 'credentialsId', type: 'java.lang.String'), parameter(name: 'poll', type: 'boolean'),], doc: 'Git')
        method(name: 'junit', type: 'Object', params: [testResults: 'java.lang.String'], doc: 'Archive JUnit-formatted test results')
        method(name: 'junit', type: 'Object', namedParams: [parameter(name: 'testResults', type: 'java.lang.String'), parameter(name: 'allowEmptyResults', type: 'boolean'), parameter(name: 'healthScaleFactor', type: 'double'), parameter(name: 'keepLongStdio', type: 'boolean'), parameter(name: 'testDataPublishers', type: 'Map'),], doc: 'Archive JUnit-formatted test results')
        method(name: 'load', type: 'Object', params: [path: 'java.lang.String'], doc: 'Evaluate a Groovy source file into the Pipeline script')
        method(name: 'powershell', type: 'Object', params: [script: 'java.lang.String'], doc: 'PowerShell Script')
        method(name: 'powershell', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'),], doc: 'PowerShell Script')
        method(name: 'publishHTML', type: 'Object', params: [target: 'Map'], doc: 'Publish HTML reports')
        method(name: 'pwd', type: 'Object', params: [:], doc: 'Determine current directory')
        method(name: 'pwd', type: 'Object', namedParams: [parameter(name: 'tmp', type: 'boolean'),], doc: 'Determine current directory')
        method(name: 'readFile', type: 'Object', params: [file: 'java.lang.String'], doc: 'Read file from workspace')
        method(name: 'readFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'),], doc: 'Read file from workspace')
        method(name: 'sh', type: 'Object', params: [script: 'java.lang.String'], doc: 'Shell Script')
        method(name: 'sh', type: 'Object', namedParams: [parameter(name: 'script', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'), parameter(name: 'returnStatus', type: 'boolean'), parameter(name: 'returnStdout', type: 'boolean'),], doc: 'Shell Script')
        method(name: 'stash', type: 'Object', params: [name: 'java.lang.String'], doc: 'Stash some files to be used later in the build')
        method(name: 'stash', type: 'Object', namedParams: [parameter(name: 'name', type: 'java.lang.String'), parameter(name: 'allowEmpty', type: 'boolean'), parameter(name: 'excludes', type: 'java.lang.String'), parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'useDefaultExcludes', type: 'boolean'),], doc: 'Stash some files to be used later in the build')
        method(name: 'tm', type: 'Object', params: [stringWithMacro: 'java.lang.String'], doc: 'Expand a string containing macros')
        method(name: 'unstash', type: 'Object', params: [name: 'java.lang.String'], doc: 'Restore files previously stashed')
        method(name: 'validateDeclarativePipeline', type: 'Object', params: [path: 'java.lang.String'], doc: 'Validate a file containing a Declarative Pipeline')
        method(name: 'wrap', type: 'Object', params: [delegate: Map, body: 'Closure'], doc: 'General Build Wrapper')
        method(name: 'writeFile', type: 'Object', namedParams: [parameter(name: 'file', type: 'java.lang.String'), parameter(name: 'text', type: 'java.lang.String'), parameter(name: 'encoding', type: 'java.lang.String'),], doc: 'Write file to workspace')
        method(name: 'archive', type: 'Object', params: [includes: 'java.lang.String'], doc: 'Advanced/Deprecated Archive artifacts')
        method(name: 'archive', type: 'Object', namedParams: [parameter(name: 'includes', type: 'java.lang.String'), parameter(name: 'excludes', type: 'java.lang.String'),], doc: 'Archive artifacts')
        method(name: 'dockerFingerprintFrom', type: 'Object', namedParams: [parameter(name: 'dockerfile', type: 'java.lang.String'), parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'buildArgs', type: 'Map'), parameter(name: 'toolName', type: 'java.lang.String'),], doc: 'Record trace of a Docker image used in FROM')
        method(name: 'unarchive', type: 'Object', params: [:], doc: 'Advanced/Deprecated Copy archived artifacts into the workspace')
        method(name: 'unarchive', type: 'Object', namedParams: [parameter(name: 'mapping', type: 'Map'),], doc: 'Copy archived artifacts into the workspace')
        method(name: 'withDockerContainer', type: 'Object', params: [image: 'String', body: 'Closure'], doc: 'Advanced/Deprecated Run build steps inside a Docker container')
        method(name: 'withDockerContainer', type: 'Object', params: [body: Closure], namedParams: [parameter(name: 'image', type: 'java.lang.String'), parameter(name: 'args', type: 'java.lang.String'), parameter(name: 'toolName', type: 'java.lang.String'),], doc: 'Run build steps inside a Docker container')
        method(name: 'withDockerRegistry', type: 'Object', params: [registry: Map, body: 'Closure'], doc: 'Advanced/Deprecated Sets up Docker registry endpoint')
        method(name: 'withDockerServer', type: 'Object', params: [server: Map, body: 'Closure'], doc: 'Advanced/Deprecated Sets up Docker server endpoint')
        method(name: 'parallel', type: 'Object', params: [body: 'Map'], doc: 'Run taask in parallel')
    }

    // Post actions!
    if (enclosingCall("post")) {
        method(name: 'always', type: 'Object', params: [body: 'Closure'])
        method(name: 'success', type: 'Object', params: [body: 'Closure'])
        method(name: 'failure', type: 'Object', params: [body: 'Closure'])
        method(name: 'unstable', type: 'Object', params: [body: 'Closure'])
        method(name: 'changed', type: 'Object', params: [body: 'Closure'])
    }
}