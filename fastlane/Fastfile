# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)
platform :ios do
    before_all do |lane, options|
        unlock_keychain( # Unlock an existing keychain and add it to the keychain search list
            path: "login.keychain-db",
            password: ENV["KEYCHAIN_PASSWORD"]
        )
    end
	lane :getIdentifier do |options|
		preRelease = options[:preRelease]
		puts "Get #{preRelease}"
		case options[:preRelease]
		when 'test'
			"com.kto.asia.dev"
		when 'dev'
			"com.kto.asia.qat-1"
		when 'rc'
			"com.kto.asia.stg"
		when 'release'
			"com.kto.asia"
		when 'hotfix'
			"com.kto.asia.qat3"
		when 'selftest'
			"com.kto.asia.selftest"
		when 'backup'
			"com.kto.asia.backup"
		else
			UI.user_error!("No selectable options(option:test,dev,rc,pro,hotfix,selftest,backup)")
		end
	end

	lane :getNextTestflightBuildNumber do |options|
		id  = getIdentifier(preRelease: options[:releaseTarget])
		buildNumber = latest_testflight_build_number(app_identifier: id, version:options[:targetVersion], initial_build_number:0)
		sh("echo #{buildNumber} > buildNumber")
	end

	lane :getEnviroment do |options|
		preRelease = options[:preRelease]
		puts "Get #{preRelease}"
		case options[:preRelease]
		when 'test'
			"dev"
		when 'dev'
			"qat"
		when 'rc'
			"staging"
		when 'release'
			"production"
		when 'hotfix'
			"com.kto.asia.qat3"
		when 'selftest'
			"prod-selftest"
		when 'backup'
			"prod-backup"
		else
			UI.user_error!("No selectable options(option:test,dev,rc,pro,hotfix,selftest,backup)")
		end
	end

    key_file_path = ENV['API_KEY']
	key_id_value = ENV['KEY_ID']
    api_key = app_store_connect_api_key(
            key_id: key_id_value,#API kid
            issuer_id: "7a9803b0-51d8-44c5-ba26-f916da982cbe",#Issuer ID
            key_filepath: key_file_path,
            duration: 1200, 
            in_house: false, 
        )

	lane :buildIpa  do |options|
	    match(type: "adhoc", readonly: is_ci, app_identifier: "com.kto.asia.dev")
		update_info_plist(plist_path: "ktobet-asia-ios/info.plist", 
				  block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)
  		build_app(scheme: "ktobet-asia-ios",
			  workspace: "ktobet-asia-ios.xcworkspace",
            		  include_bitcode: true,
			  clean: true,
		   	  output_directory: "output",
			  export_method: "ad-hoc",
			  skip_package_ipa: true,
			  skip_archive: true
			 )

	end


	lane :buildIpaQat  do |options|
	    match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.qat-1")
		update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-qat-Info.plist", 
				  block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)
  		build_app(scheme: "ktobet-asia-ios-qat",
			  workspace: "ktobet-asia-ios.xcworkspace",
            		  include_bitcode: true,
			  clean: true,
		   	  output_directory: "output",
			  export_method: "ad-hoc",
	    		  export_options: { 
					    method: "ad-hoc",
					  }
			 )

	end

    lane :buildIpaStaging  do |options|
        buildIpaStgCN(options)
        buildIpaStgVN(options)
	end

    lane :buildIpaStgCN  do |options|
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.stg")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-staging-Info.plist",
                  block: proc do |plist|
                    plist["CFBundleVersion"]  = options[:buildVersion]
                    plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
          build_app(scheme: "ktobet-asia-ios-staging",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    clean: true,
                    output_directory: "output",
                    output_name: "staging-cn.ipa"
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    }
             )
    end
    
    lane :buildIpaStgVN  do |options|
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.stg.vn")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-staging-vn-Info.plist",
                  block: proc do |plist|
                    plist["CFBundleVersion"]  = options[:buildVersion]
                    plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
          build_app(scheme: "ktobet-asia-ios-staging-vn",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    clean: true,
                    output_directory: "output",
                    output_name: "staging-vn.ipa"
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    }
             )
    end

	lane :uploadstagingToTestflight do |options|
	match(type: "appstore", readonly: is_ci, app_identifier:"com.kto.asia.stg")
		update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-staging-Info.plist", 
				  block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)

    		gym(	configuration: "Release",
      		     	scheme: "ktobet-asia-ios-staging",
      		     	clean: true,
      		     	include_bitcode: true,
      			include_symbols: true,
			output_name: "staging-testflight.ipa",
			output_directory: "output",
      			export_method: 'app-store')

    		upload_to_testflight(   username: "higgs-mobile@hotmail.com",
  					app_identifier: "com.kto.asia.stg")
	end



	lane :uploadToTestflight do |options|
	match(type: "appstore", readonly: is_ci, app_identifier:"com.kto.asia.qat-1")
		update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-qat-Info.plist", 
				  block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)

    		gym(	configuration: "Release",
      		     	scheme: "ktobet-asia-ios-qat",
      		     	clean: true,
      		     	include_bitcode: true,
      			include_symbols: true,
			output_directory: "output",
      			export_method: 'app-store')

    		upload_to_testflight(   username: "higgs-mobile@hotmail.com",
  					app_identifier: "com.kto.asia.qat-1")
	end
	
	lane :buildIpaProduction do |options|
        buildIpaProdCN(options)
        buildIpaProdVN(options)
	end
 
    lane :buildIpaProdCN do |options|
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-production-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
          build_app(scheme: "ktobet-asia-ios-production",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    clean: true,
                    output_directory: "output",
                    output_name: "Prod-cn.ipa"
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    })
    end
    
    lane :buildIpaProdVN do |options|
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.vn")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-production-vn-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
          build_app(scheme: "ktobet-asia-ios-production-vn",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    clean: true,
                    output_directory: "output",
                    output_name: "Prod-vn.ipa"
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    })
    end
 
    lane :buildProdSelf do |options|
        match(type: "appstore", readonly: is_ci, app_identifier:"com.kto.asia.selftest")
        
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-prod-selftest-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                  end)
                  
        gym(configuration: "Release",
            scheme: "ktobet-asia-ios-prod-selftest",
            clean: true,
            include_bitcode: true,
            include_symbols: true,
            output_directory: "output",
            export_method: 'app-store')

        upload_to_testflight(username: "higgs-mobile@hotmail.com",
            app_identifier: "com.kto.asia.selftest")

    end
    
    lane :buildProdBackup do |options|
        match(type: "appstore", readonly: is_ci, app_identifier:"com.kto.asia.backup")
        
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-prod-backup-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                  end)
        
        gym(configuration: "Release",
            scheme: "ktobet-asia-ios-prod-backup",
            clean: true,
            include_bitcode: true,
            include_symbols: true,
            output_directory: "output",
            export_method: 'app-store')

        upload_to_testflight(username: "higgs-mobile@hotmail.com",
            app_identifier: "com.kto.asia.backup")

    end
    
    lane :buildQat3 do |options|
        match(type: "appstore", readonly: is_ci, app_identifier:"com.kto.asia.qat3")
        
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-qat3-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                  end)
        
        gym(configuration: "Release",
            scheme: "ktobet-asia-ios-qat3",
            clean: true,
            include_bitcode: true,
            include_symbols: true,
            output_directory: "output",
            export_method: 'app-store')

        upload_to_testflight(username: "higgs-mobile@hotmail.com",
            app_identifier: "com.kto.asia.qat3")

    end
    
    lane :tests do
        run_tests(scheme: "ktobet-asia-iosTests")
    end

	lane :uploadTestflight do |options|
		identifier  = getIdentifier(preRelease: options[:releaseTarget])
		env = getEnviroment(preRelease: options[:releaseTarget])
		plistPath = "ktobet-asia-ios/ktobet-asia-ios-#{env}-Info.plist"
		scheme = "ktobet-asia-ios-#{env}"
		match(type: "appstore", readonly: is_ci, app_identifier: identifier)
		update_info_plist(plist_path: plistPath, 
				  block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)

		gym(configuration: "Release",
			scheme: scheme,
			clean: true,
			include_bitcode: true,
			include_symbols: true,
			output_directory: "output",
			export_method: 'app-store')

		upload_to_testflight(username: "higgs-mobile@hotmail.com",app_identifier: identifier)
	end
end
