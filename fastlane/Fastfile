# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)
platform :ios do
    lane :metrics do
        scan(
            scheme: "ktobet-asia-iosTests", 
	    workspace: "ktobet-asia-ios.xcworkspace",
            code_coverage: true, 
            derived_data_path: "./DerivedData", 
            output_directory: "./sonar-reports",
            output_types: 'junit,html',
            output_files: "report.xml,report.html")
        swiftlint(output_file: "./sonar-reports/swiftlint.txt", 
            ignore_exit_status: true)
        slather(
            jenkins: false, 
            scheme: "ktobet-asia-iosTests", 
            build_directory: "./DerivedData", 
            output_directory: "./sonar-reports", 
            proj: "./ktobet-asia-ios.xcodeproj",
            binary_basename: "ktobet-asia-ios-qat",
            workspace: "ktobet-asia-ios.xcworkspace",
            cobertura_xml: "true")
        lizard(source_folder: "./ktobet-asia-ios", language: "swift", export_type: "xml", report_file: "sonar-reports/lizard-report.xml")
        sonar(
            sonar_runner_args: "-X",
            sonar_url:"http://172.16.5.60:64132/",         
            project_key:"mobile_ktobet-asia-ios_AYJrnFQAFHvKqZrAwtxX",
            sonar_login:"sqa_6822e86b0f0fbfe5ec293fcce53f44942052b2b8")
    end
    
    lane :setupKeyStore do
        unlock_keychain( # Unlock an existing keychain and add it to the keychain search list
            path: "login.keychain-db",
            password: ENV["KEYCHAIN_PASSWORD"]
        )
        app_store_connect_api_key(
            key_id:  ENV['KEY_ID'],#API kid
            issuer_id: "7a9803b0-51d8-44c5-ba26-f916da982cbe",#Issuer ID
            key_filepath: ENV['API_KEY'],
            duration: 1200, 
            in_house: false, 
        )
    end
    
    lane :tests do
        run_tests(scheme: "ktobet-asia-iosTests",
                  output_types: 'junit,html',
                  output_files: "junit.xml,report.html")
        run_tests(scheme: "swiftUI-unitTest",
                  output_types: 'junit,html',
                  output_files: "swiftUI_junit.xml,swiftUI_report.html")
    end

	lane :getIdentifier do |options|
		preRelease = options[:preRelease]
		puts "Get #{preRelease}"
		case options[:preRelease]
		when 'test'
			"com.kto.asia.dev"
		when 'dev'
			"com.kto.asia.qat-1"
		when 'rc'
			"com.kto.asia.stg"
		when 'release'
			"com.kto.asia"
		when 'hotfix'
			"com.kto.asia.qat3"
		when 'selftest'
			"com.kto.asia.selftest"
		when 'backup'
			"com.kto.asia.backup"
		else
			UI.user_error!("No selectable options(option:test,dev,rc,pro,hotfix,selftest,backup)")
		end
	end

	lane :getNextTestflightBuildNumber do |options|
 		setupKeyStore()
		id  = getIdentifier(preRelease: options[:releaseTarget])
		buildNumber = latest_testflight_build_number(app_identifier: id, version:options[:targetVersion], initial_build_number:0)
		sh("echo #{buildNumber} > buildNumber")
	end

	lane :getEnviroment do |options|
		preRelease = options[:preRelease]
		puts "Get #{preRelease}"
		case options[:preRelease]
		when 'test'
			"dev"
		when 'dev'
			"qat"
		when 'rc'
			"staging"
		when 'release'
			"production"
		when 'hotfix'
			"com.kto.asia.qat3"
		when 'selftest'
			"prod-selftest"
		when 'backup'
			"prod-backup"
		else
			UI.user_error!("No selectable options(option:test,dev,rc,pro,hotfix,selftest,backup)")
		end
	end

    lane :buildIpaStaging  do |options|
        buildIpaStgCN(options)
        buildIpaStgVN(options)
	end

    private_lane :buildIpaStgCN  do |options|
        setupKeyStore()
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.stg")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-staging-Info.plist",
                  block: proc do |plist|
                    plist["CFBundleVersion"]  = options[:buildVersion]
                    plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
        env = getEnviroment(preRelease: options[:releaseTarget])
        versionNum = options[:appVersion]
        build_app(scheme: "ktobet-asia-ios-staging",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    include_symbols: true,
                    clean: true,
                    archive_path: "./output/#{env}.xcarchive",
                    output_directory: "#{versionNum}",
                    output_name: "kto-asia-#{versionNum}-staging-cn.ipa",
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    }
             )
             
        upload_symbols_to_crashlytics(dsym_path: "./#{versionNum}/kto-asia-#{versionNum}-staging-cn.app.dSYM.zip",
                                    gsp_path:"./ktobet-asia-ios/Firebase/stg/GoogleService-Info.plist")
    end
    
    private_lane :buildIpaStgVN  do |options|
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.stg.vn")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-staging-vn-Info.plist",
                  block: proc do |plist|
                    plist["CFBundleVersion"]  = options[:buildVersion]
                    plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
        versionNum = options[:appVersion]
        build_app(scheme: "ktobet-asia-ios-staging-vn",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    include_symbols: true,
                    clean: true,
                    output_directory: "#{versionNum}",
                    output_name: "kto-asia-#{versionNum}-staging-vn.ipa",
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    }
             )
            
        upload_symbols_to_crashlytics(dsym_path: "./#{versionNum}/kto-asia-#{versionNum}-staging-vn.app.dSYM.zip",
                                    gsp_path:"./ktobet-asia-ios/Firebase/stg-vn/GoogleService-Info.plist")
    end

	lane :uploadToTestflight do |options|
        setupKeyStore()
		update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-qat-Info.plist",
                    block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)

        qat1Testflight(options)
        
        versionNum = options[:appVersion]
        upload_to_testflight(username: "higgs-mobile@hotmail.com",
                    app_identifier: "com.kto.asia.qat-1",
                    ipa:"./output/ktobet-asia-ios-#{versionNum}-qat.ipa",
					skip_waiting_for_build_processing: true)
                    
        upload_symbols_to_crashlytics(dsym_path: "./output/ktobet-asia-ios-#{versionNum}-qat.app.dSYM.zip",
                                    gsp_path:"./ktobet-asia-ios/Firebase/qat/GoogleService-Info.plist")
	end
 
    private_lane :qat1Testflight do |options|
        versionNum = options[:appVersion]
        match(type: "appstore", readonly: true, app_identifier:"com.kto.asia.qat-1")
        gym(configuration: "Release",
            scheme: "ktobet-asia-ios-qat",
            clean: true,
            include_bitcode: true,
            archive_path: "./output/qat.xcarchive",
            output_directory: "output",
            output_name: "ktobet-asia-ios-#{versionNum}-qat.ipa",
            export_method: 'app-store')
    end
    
    private_lane :qat1AdHoc do |options|
        versionNum = options[:appVersion]
        match(type: "adhoc", readonly: true, app_identifier:"com.kto.asia.qat-1")
        gym(scheme: "ktobet-asia-ios-qat",
            skip_build_archive: true,
            archive_path: "./output/qat.xcarchive",
            output_directory: "output",
            output_name: "ktobet-asia-ios-#{versionNum}-qat-adHoc.ipa",
            export_method: "ad-hoc")
    end
	
	lane :buildIpaProduction do |options|
        buildIpaProdCN(options)
        buildIpaProdVN(options)
	end
 
    private_lane :buildIpaProdCN do |options|
        setupKeyStore()
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-production-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
        env = getEnviroment(preRelease: options[:releaseTarget])
        versionNum = options[:appVersion]
        build_app(scheme: "ktobet-asia-ios-production",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    include_symbols: true,
                    clean: true,
                    archive_path: "./output/#{env}.xcarchive",
                    output_directory: "#{versionNum}",
                    output_name: "kto-asia-#{versionNum}-prod-cn.ipa",
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    })
                    
        upload_symbols_to_crashlytics(dsym_path: "./#{versionNum}/kto-asia-#{versionNum}-prod-cn.app.dSYM.zip",
                                    gsp_path:"./ktobet-asia-ios/Firebase/prod/GoogleService-Info.plist")
    end
    
    private_lane :buildIpaProdVN do |options|
        setupKeyStore()
        match(type: "adhoc", readonly: is_ci, app_identifier:"com.kto.asia.vn")
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-production-vn-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                    end)
        versionNum = options[:appVersion]
        build_app(scheme: "ktobet-asia-ios-production-vn",
                    workspace: "ktobet-asia-ios.xcworkspace",
                    include_bitcode: true,
                    include_symbols: true,
                    clean: true,
                    output_directory: "#{versionNum}",
                    output_name: "kto-asia-#{versionNum}-prod-vn.ipa",
                    export_method: "ad-hoc",
                    export_options: {
                        method: "ad-hoc",
                    })
                    
        upload_symbols_to_crashlytics(dsym_path: "./#{versionNum}/kto-asia-#{versionNum}-prod-vn.app.dSYM.zip",
                                    gsp_path:"./ktobet-asia-ios/Firebase/prod_vn/GoogleService-Info.plist")
    end
 
    lane :buildQat3 do |options|
        setupKeyStore()
        match(type: "appstore", readonly: is_ci, app_identifier:"com.kto.asia.qat3")
        
        update_info_plist(plist_path: "ktobet-asia-ios/ktobet-asia-ios-qat3-Info.plist",
                  block: proc do |plist|
                  plist["CFBundleVersion"] = options[:buildVersion]
                  plist["CFBundleShortVersionString"] = options[:appVersion]
                  end)
        
        gym(configuration: "Release",
            scheme: "ktobet-asia-ios-qat3",
            clean: true,
            include_bitcode: true,
            include_symbols: true,
            output_directory: "output",
            export_method: 'app-store')

        upload_to_testflight(username: "higgs-mobile@hotmail.com",
                            app_identifier: "com.kto.asia.qat3",
                            skip_waiting_for_build_processing: true)
        
        versionNum = options[:appVersion]
        download_dsyms(username: "higgs-mobile@hotmail.com",
                    app_identifier: "com.kto.asia.qat3",
                    version: versionNum)
                    
        upload_symbols_to_crashlytics(gsp_path: "./ktobet-asia-ios/Firebase/qat3/GoogleService-Info.plist")

    end
    
	lane :uploadTestflight do |options|
        setupKeyStore()
		identifier  = getIdentifier(preRelease: options[:releaseTarget])
		env = getEnviroment(preRelease: options[:releaseTarget])
		plistPath = "ktobet-asia-ios/ktobet-asia-ios-#{env}-Info.plist"
		scheme = "ktobet-asia-ios-#{env}"
		match(type: "appstore", readonly: is_ci, app_identifier: identifier)
		update_info_plist(plist_path: plistPath, 
				  block: proc do |plist|
					plist["CFBundleVersion"]  = options[:buildVersion]
					plist["CFBundleShortVersionString"] = options[:appVersion]
  				  end)

		gym(configuration: "Release",
			scheme: scheme,
			skip_build_archive: true,
            archive_path: "./output/#{env}.xcarchive",
			include_bitcode: true,
			include_symbols: true,
			output_directory: "output",
			export_method: 'app-store')

		upload_to_testflight(username: "higgs-mobile@hotmail.com",
                            app_identifier: identifier,
                            skip_waiting_for_build_processing: true)
                            
        versionNum = options[:appVersion]
        download_dsyms(username: "higgs-mobile@hotmail.com",
                    app_identifier: identifier,
                    version: versionNum)
                    
        infoPath = getGoogleServiceInfo(preRelease: options[:releaseTarget])
        upload_symbols_to_crashlytics(gsp_path: "./ktobet-asia-ios/Firebase/#{infoPath}/GoogleService-Info.plist")
	end
 
    lane :getGoogleServiceInfo do |options|
        preRelease = options[:preRelease]
        puts "Get #{preRelease}"
        case options[:preRelease]
        when 'test'
            "dev"
        when 'dev'
            "qat"
        when 'rc'
            "stg"
        when 'release'
            "prod"
        when 'hotfix'
            "qat3"
        when 'selftest'
            "prod_self_test"
        when 'backup'
            "prod_backup"
        else
            UI.user_error!("No selectable options(option:test,dev,rc,pro,hotfix,selftest,backup)")
        end
    end
end
