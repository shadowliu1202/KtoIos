include:
  - project : 'mobile/pipelinetemplate'
    ref: master
    file: 
      - '.before_script_template.yml'      

variables:
  LANG: "en_US.UTF-8"
  LC_ALL: "en_US.UTF-8"
  FORCE_UPADATE: "false"
  BREAKING_CHANGE: "false"
  STORE_BUILD_NUMBER_FILE: "/Users/app/buildVariables/kto_ios_build_number.txt"
  MATCH_PASSWORD: "password"
  KEYCHAIN_PASSWORD: "8YVFeB2N7iwEp"
stages:          # List of stages for jobs, and their order of execution
  - inProgress
  - mergeRequest
  - merged
  - test
  - analyze
  - publish
  - notify

build-job:
  stage: inProgress
  tags:
    - mac-emulator
  variables:
    ISSUE_KEY: $CI_COMMIT_BRANCH
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /(APP|PD)-[0-9]+/ && $CI_PIPELINE_SOURCE != "merge_request_event" && $CI_PIPELINE_SOURCE != "web")
  script:
    - EMAIL_NAME="$(echo $GITLAB_USER_EMAIL | sed "s/@.*//")"
    - transition_jira_issue_with_status "$ISSUE_KEY" "In Progress"    
    - assign_to_user "$ISSUE_KEY" "${EMAIL_NAME}"
      
UnitTests:
  stage: test
  rules:
   - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
  tags:
    - mac-slave
  before_script:
    - pod install --repo-update --allow-root
  script:
    - fastlane tests
  artifacts:
    when: always
    paths:
        - "fastlane/test_output/"
    reports:
        junit:
            - "fastlane/test_output/*.xml"

merge-job:
  stage: mergeRequest
  tags:
    - mac-emulator
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  variables:
    BRANCH_NAME: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  script:
    - rm -rf ~/Library/Developer/Xcode/DerivedData
    - transition_jira_issue_with_status "$BRANCH_NAME" "Merge Request"
    - update_rootcause_category "$BRANCH_NAME" "$DESCRIPTION"

merged-job:
  stage: merged
  tags:
    - mac-emulator
  rules:
    - if: ($CI_COMMIT_MESSAGE =~ /Merge branch 'KTO-[0-9]+'/ && $CI_COMMIT_REF_NAME == "master")
  script:
    - |
      regex="KTO-[0-9]+"
      if [[ $CI_COMMIT_MESSAGE =~ $regex ]]; then
        issueKey=${BASH_REMATCH[0]}
        echo "Extracted IssueKEy: $issueKey"
        merge_jira_issue "$issueKey"        
      else
        echo "No matching string found in CI_COMMIT_MESSAGE"
      fi

get_related_issues:
  variables:
    GIT_STRATEGY: clone
  stage: analyze
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - |
      last_tag=$(get_last_tag)
      echo "last tag = $last_tag"
      echo "LAST_TAG=$last_tag" >> variables.env

      commit_messages=$(fetch_commits_since_tag_to_head "$last_tag")
      jira_tickets=$(extract_jira_tickets "$commit_messages")
         # Remove newline characters from jira_tickets
      jira_tickets=$(echo "$jira_tickets" | tr '\n' ' ' | sed 's/ *$//g')
      
      related_issues=""    

      if [ -z "$jira_tickets" ]; then
        related_issues="$CI_COMMIT_BRANCH"
      else
        related_issues="$jira_tickets"
      fi
      
      # Store the related issues in the environment file
      echo "RELATED_ISSUE=$related_issues" >> variables.env
      echo "related issues: $related_issues"
  artifacts:
    reports:
      dotenv: variables.env

get_next_version:
  variables:
    # CI_DEBUG_TRACE: "true"
    RELEASE_TARGET: 'dev' 
  stage: analyze
  needs: [ "get_related_issues" ]
  tags: 
    - ios-agent-release
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - |
      version=$(get_next_version "$LAST_TAG" "$FORCE_UPADATE" "$BREAKING_CHANGE" "$RELATED_ISSUE")
      echo "next version: $version"
      echo "NEXT_VERSION=$version" >> variables.env      
      fastlane getNextTestflightBuildNumber releaseTarget:$RELEASE_TARGET targetVersion:$version
      buildNumber=$(cat "fastlane/buildNumber")
      nextBuildNumber=$((buildNumber + 1))
      echo "BUILD_NUMBER=$nextBuildNumber" >> variables.env
      echo "next build number: $nextBuildNumber"
  artifacts:
    reports:
      dotenv: variables.env

build_ipa:
  stage: publish
  needs: ["get_next_version"]
  tags: 
    - ios-agent-release
  variables:
    RELEASE_TARGET: 'dev'    
    ReleaseTag: "$NEXT_VERSION-$RELEASE_TARGET" 
    NEXT_BUILD_NUMBER: "$BUILD_NUMBER"
    RELEASE_VERSIONCORE: "$NEXT_VERSION"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script: 
    - echo "new build number ${NEXT_BUILD_NUMBER}"
    - |
      echo "release tag $ReleaseTag"
      pod install --repo-update
      fastlane uploadToTestflight buildVersion:$NEXT_BUILD_NUMBER appVersion:$NEXT_VERSION releaseTarget:$RELEASE_TARGET
      upload_to_proget_feed "app" "ios" "kto-asia" "$ReleaseTag" "build version: $NEXT_BUILD_NUMBER" "output/ktobet-asia-ios-${RELEASE_VERSIONCORE}-qat.ipa"
      echo "Calculating IPA size"
      size=$(du -s -k output/ktobet-asia-ios-${RELEASE_VERSIONCORE}-qat.ipa | awk '{printf "%.2f", $1/1024}')
      echo "Get Ipa Size = $size"
      echo "IPA_SIZE=$size" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

update_portal_version:
  stage: publish
  needs: ["build_ipa","get_next_version"]
  tags: 
    - ios-agent-release
  variables:
    RELEASE_TARGET: 'dev'    
    ReleaseTag: "$NEXT_VERSION-$RELEASE_TARGET" 
    NEXT_BUILD_NUMBER: "$BUILD_NUMBER"
    DOWNLOAD_URL_CN: "$IOS_QAT_DOWNLOAD_URL_CN"
    DOWNLOAD_URL_VN: "$IOS_QAT_DOWNLOAD_URL_VN"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script: 
    - echo "Publishing version with size $IPA_SIZE version:$NEXT_VERSION number:$NEXT_BUILD_NUMBER"
    - |      
      publishIosVersion "[174]" "qat" "$NEXT_VERSION" "$NEXT_BUILD_NUMBER" "$DOWNLOAD_URL_CN" "$DOWNLOAD_URL_VN" "$IPA_SIZE"
      tagRelease "qat" "$BUILD_NUMBER" "$NEXT_VERSION-$RELEASE_TARGET"

update_jira_issues:
  stage: publish
  needs: ["build_ipa"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - |
      echo "update jira issues $RELATED_ISSUE"
      update_publish_jira_tickets "release to QAT" "$NEXT_VERSION-qat" $RELATED_ISSUE

notify_publish:
  variables:
    RELEASE_TARGET: 'dev'
    DOWNLOAD_PAGE: "https://qat1-app.affclub.xyz/"
    ISSUE_LINK: "https://jira.higgstar.com/issues/?jql=project%20%3D%20KTO%20AND%20labels%20%3D%20ios-$NEXT_VERSION-qat"
    DOWNLOAD_FILE: "${PROGET_URL}/feeds/app/ios/kto-asia/${NEXT_VERSION}-${RELEASE_TARGET}/files"
    TEAMS_WEBHOOK_URL: "https://higgstar.webhook.office.com/webhookb2/4633c5c4-c4b4-4e4a-811a-292e1c2bba93@8e771fc0-280e-4271-a200-ad98dd5f6605/IncomingWebhook/7299ee0a8a304576814e537a53d5930b/dbab47a2-891a-470f-a94e-4dbb41d9acbc"
    # TEAMS_WEBHOOK_URL: "https://higgstar.webhook.office.com/webhookb2/4633c5c4-c4b4-4e4a-811a-292e1c2bba93@8e771fc0-280e-4271-a200-ad98dd5f6605/IncomingWebhook/7299ee0a8a304576814e537a53d5930b/dbab47a2-891a-470f-a94e-4dbb41d9acbc"
  needs: ["get_next_version", "build_ipa","update_portal_version","update_jira_issues"]
  stage: notify
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - |      
      message_payload=$(create_kto_notify "$LAST_TAG" "$NEXT_VERSION" "qat" "$DOWNLOAD_PAGE" "$ISSUE_LINK" "$DOWNLOAD_FILE")
      curl -H "Content-Type: application/json" -d "${message_payload}" ${TEAMS_WEBHOOK_URL}  
