include:
  - project : 'mobile/pipelinetemplate'
    ref: master
    file:
      - '.before_script_template.yml'

.release_rules:
  rules:
    - if:  $UPDATE_LINK_VN
      when: never
    - if:  $CI_PIPELINE_SOURCE == "web" && $TARGET_ENVIROMENT == "QAT"
    - if:  $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG
    - if:  $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH =~ /^([0-9]+\.[0-9]+\.[0-9]+)-hotfix$/

.formal_rules:
  rules:
    - if: $TARGET_ENVIROMENT == "QAT"
      when : never
    - if: $TARGET_ENVIROMENT == "PRE"
      when : never
    - if: $CI_COMMIT_TAG && $CI_PIPELINE_SOURCE == "web"

.qat_rules:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH =~ /^([0-9]+\.[0-9]+\.[0-9]+)-hotfix$/
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $TARGET_ENVIROMENT == "QAT"

.change_link_rules:
  rules:
    - if: ! -z "$UPDATE_LINK_VN" && $CI_COMMIT_TAG =~ /^([0-9]+\.[0-9]+\.[0-9]+)-release|rc/ && $CI_PIPELINE_SOURCE == "web"

.hotfix_rules:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^([0-9]+\.[0-9]+\.[0-9]+)-hotfix$/

.qat_with_stg_rules:
  rules:
    - if: $PUBLISH_QAT_WITH_STG == "true" && $CI_PIPELINE_SOURCE == "web" && $TARGET_ENVIROMENT == "QAT"

stages:
- development
- versionSync    # Calculate and compare the release version with the previous one
- sanityTesting  # Initialize AIO tests for QAT
- release        # trigger release stream for QAT/STG/PRE/PRO

variables:
 TARGET_ENVIROMENT:
   value: "QAT"
   description: "QAT/STG/PRO"
 PUBLISH_QAT_WITH_STG:
   value: "false"
   description: "[QAT only]: false/true"
 SKIP_TEST:
   value: "false"
   description: "[QAT only]: false/true"
 BREAKING_CHANGE:
   value: "false"
   description: "[QAT only]: false/true"
 FORCE_UPDATE:
   value: "false"
   description: "[QAT only]: false/true"
 UPDATE_LINK_VN:
   value: ""
   description: "[STG/PRO tag only]: Download link for vn"
 BUILD_HOTFIX_TARGET:
   value: ""
   description: "[HOTFIX only] extra build targets for hotfix: QAT,STG"
 LANG: "en_US.UTF-8"
 LC_ALL: "en_US.UTF-8"
 MATCH_PASSWORD: "password"
 KEYCHAIN_PASSWORD: "8YVFeB2N7iwEp"

inProgress:
  stage: development
  variables:
    CI_DEBUG_TRACE: "true"
  tags:
      - mac-slave
  rules:
      - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        when: never
      - if: '$CI_COMMIT_REF_NAME =~ /(APP|KTO)-[0-9]+/ && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_MESSAGE !~ /Merge branch/'
  script:
    - EMAIL_NAME="$(echo $GITLAB_USER_EMAIL | sed "s/@.*//")"
    - transition_jira_issue_with_status "$CI_COMMIT_BRANCH" "In Progress"
    - assign_to_user "$CI_COMMIT_BRANCH" "${EMAIL_NAME}"

UnitTests:
  stage: development
  rules:
   - if: ($CI_PIPELINE_SOURCE == "merge_request_event")
  tags:
    - mac-slave
  before_script:
    - pod install --repo-update --allow-root
  script:
    - fastlane tests
  artifacts:
    when: always
    paths:
        - "fastlane/test_output/"
    reports:
        junit:
            - "fastlane/test_output/*.xml"
    expire_in: 1 week

merge_request:
  stage: development
  tags:
    - mac-slave
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /(APP|KTO)-[0-9]+/ && $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
      CI_COMMIT_BRANCH: "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
  script:
      - curl https://gitlab.higgstar.com/api/v4/projects/695/repository/files/commitlint-gitlab.sh/raw | bash
      - check_branch_pattern "$CI_COMMIT_BRANCH"
      - |         
        mr_data=$(fetch_merge_request_data "$CI_PROJECT_ID" "$CI_MERGE_REQUEST_IID")
        title=$(echo "$mr_data" | jq -r .title | tr "[:upper:]" "[:lower:]")
        description=$(echo "$mr_data" | jq -r .description)
        detail=$(get_issue_details "$CI_COMMIT_BRANCH")
        issueName=$(jq -r .fields.issuetype.name <<< "$detail")        
        echo "update ${CI_COMMIT_BRANCH}(${issueName}) $title $description"
        check_merge_request_description "$title" "$description" "$issueName"
        update_rootcause_category "$CI_COMMIT_BRANCH" "$description"
        transition_jira_issue_with_status "$CI_COMMIT_BRANCH" "Merge Request"

merged_to_branch:
  stage: development
  tags:
    - app-linux-jenkins
  # variables:
  #   CI_DEBUG_TRACE: "true"
  rules:
     - if: $CI_COMMIT_MESSAGE =~ /Merge branch 'KTO-[0-9]+'/
  script:
    - |
      regex="KTO-[0-9]+"
      if [[ $CI_COMMIT_MESSAGE =~ $regex ]]; then
        issueKey=${BASH_REMATCH[0]}
        echo "Extracted IssueKEy: $issueKey"
        merge_jira_issue "$issueKey"        
      else
        echo "No matching string found in CI_COMMIT_MESSAGE"
      fi

get_qat_next_version:
  variables:
    GIT_STRATEGY: clone
  stage: versionSync
  tags:
    - ios-agent-release
  rules:
    - !reference [.qat_rules, rules]
  script:
    - |
      echo "SELECT_ENVIROMENT=QAT" >> variables.env
      last_tag=$(get_last_tag)
      previous_version=$(parse_version_core $last_tag)
      echo "last tag = $last_tag($previous_version)"
      echo "PREVIOUS_VERSION=$previous_version" >> variables.env
      echo "HOTFIX_COMPARE=null" >> variables.env
      commit_messages=$(fetch_commits_since_tag_to_head "$last_tag")
      jira_tickets=$(extract_jira_tickets "$commit_messages")           
      jira_tickets=$(echo "$jira_tickets" | tr '\n' ' ')
      echo "RELATED_ISSUE=$jira_tickets" >> variables.env

      version=$(get_next_version "$last_tag" $BREAKING_CHANGE $FORCE_UPDATE "$RELATED_ISSUE")           
      echo "RELEASE_VERSION_CORE=$version" >> variables.env

      suffix=$(get_release_suffix $TARGET_ENVIROMENT)
      echo "ENVIROMENT_SUFFIX=$suffix" >> variables.env

      echo "get_next_version: $version $suffix $jira_tickets from $last_tag..head"
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 2 week

get_formal_release_version:
  tags:
    - ios-agent-release
  variables:
    GIT_STRATEGY: clone
  stage: versionSync
  rules:
    - !reference [.formal_rules, rules]
  script:
    - |
      echo "SELECT_ENVIROMENT=$TARGET_ENVIROMENT" >> variables.env
      export RELEASE_VERSION_CORE=$(parse_version_core $CI_COMMIT_TAG)
      echo "RELEASE_VERSION_CORE=$RELEASE_VERSION_CORE" >> variables.env

      hotfixVersion=$(extract_hotfix_version $CI_COMMIT_TAG)
      echo "HOTFIX_COMPARE=$hotfixVersion" >> variables.env
      
      suffix=$(get_release_suffix $TARGET_ENVIROMENT)
      echo "ENVIROMENT_SUFFIX=$suffix" >> variables.env

      export ONLINE_VERSION=$(fetch_ios_online_version $TARGET_ENVIROMENT)
      echo "PREVIOUS_VERSION=$ONLINE_VERSION" >> variables.env
      onlineTag="$ONLINE_VERSION-$suffix"
      commit_messages=$(fetch_commits_between_tags $onlineTag $CI_COMMIT_TAG)
      jira_tickets=$(extract_jira_tickets "$commit_messages")
      jira_tickets=$(echo "$jira_tickets" | tr '\n' ' ')
      if [ -z "$jira_tickets" ]; then
        jira_tickets=""
      fi
      echo "RELATED_ISSUE=$jira_tickets" >> variables.env

      echo "Select Version:${RELEASE_VERSION_CORE} with hotfixVersion($hotfixVersion) to update from $onlineTag JIRA_ISSUES=$jira_tickets"
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 2 week

get_hotfix_release_version:
  tags:
    - ios-agent-release
  rules:
    - !reference [.hotfix_rules, rules]
  variables:
    VERSION_PATH: "${BUILD_VARIABLE_PATH}${CI_COMMIT_BRANCH}"
  stage: versionSync
  script:
    - |    
      echo "ENVIROMENT_SUFFIX=hotfix" >> variables.env
      echo "SELECT_ENVIROMENT=PRE" >> variables.env
      
      last_tag=$(get_last_tag)
      previous_version=$(parse_version_core $last_tag)
      echo "PREVIOUS_VERSION=$last_tag" >> variables.env

      commit_messages=$(fetch_commits_since_tag_to_head "$last_tag")
      jira_tickets=$(extract_jira_tickets "$commit_messages")           
      jira_tickets=$(echo "$jira_tickets" | tr '\n' ' ')
      echo "RELATED_ISSUE=$jira_tickets" >> variables.env

      RELEASE_VERSION_CORE=$(echo "$CI_COMMIT_BRANCH" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
      echo "RELEASE_VERSION_CORE=$RELEASE_VERSION_CORE" >> variables.env

      echo "getNextTestflightBuildNumber from $RELEASE_VERSION_CORE-hotfix"
      fastlane getNextTestflightBuildNumber releaseTarget:hotfix targetVersion:$RELEASE_VERSION_CORE
      current_hotfix_version=$(cat "fastlane/buildNumber")
      next_hotfix_version=$((current_hotfix_version + 1))
           
      echo "HOTFIX_COMPARE=$next_hotfix_version" >> variables.env

      echo "set hotfix version from $last_tag($current_hotfix_version) to $RELEASE_VERSION_CORE($next_hotfix_version) JIRA_ISSUES=$jira_tickets"
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 2 week


# aio_test:
#   needs:
#   - job: get_qat_next_version
#     optional: true
#   - job: get_formal_release_version
#     optional: true  
#   # variables:
#   #   CI_DEBUG_TRACE: "true"
#   allow_failure: false
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TARGET_ENVIROMENT == "QAT" && $SKIP_TEST == "false"'
#   stage: sanityTesting
#   tags:
#     - mac-app-test3
#   script:
#     - echo "Running AIO Tests"
#     - aio_test "$RELEASE_VERSION_CORE" "${RELEASE_VERSION_CORE}-dev"
#   artifacts:
#     when: always
#     reports:
#       junit: '**/test-results/**/*.xml'
#     expire_in: 2 week

buildAndRelease:
  stage: release
  rules:
    - !reference [.release_rules, rules]
  needs:
    - job: get_qat_next_version
      optional: true
    - job: get_formal_release_version
      optional: true
    - job: get_hotfix_release_version
      optional: true
    # - job: aio_test
    #   optional: true
  variables:
    TARGET_ENVIROMENT: "$SELECT_ENVIROMENT"
    ENVIROMENT_SUFFIX: "$ENVIROMENT_SUFFIX"
    RELEASE_VERSION_CORE: $RELEASE_VERSION_CORE
    PREVIOUS_VERSION: "$PREVIOUS_VERSION"
    RELATED_ISSUE: "$RELATED_ISSUE"
    HOTFIX_COMPARE: "$HOTFIX_COMPARE"
    BUILD_HOTFIX_TARGET: "$BUILD_HOTFIX_TARGET"
  trigger:
      include:
        - local: .app-release.yml
      strategy: depend

extra_stg_prepare:
  stage: release
  rules:
    - !reference [.qat_with_stg_rules, rules]
  variables:
      SELECT_TAG: "${RELEASE_VERSION_CORE}-dev"
  needs: ["get_qat_next_version", "buildAndRelease"]
  script:
    - |
      export ONLINE_VERSION=$(fetch_ios_online_version "STG")
      echo "PREVIOUS_VERSION=$ONLINE_VERSION" >> variables.env
      echo "RELEASE_VERSION_CORE=$RELEASE_VERSION_CORE" >> variables.env
      commit_messages=$(fetch_commits_between_tags "$ONLINE_VERSION-rc" "$SELECT_TAG")
      jira_tickets=$(extract_jira_tickets "$commit_messages")
      jira_tickets=$(echo "$jira_tickets" | tr '\n' ' ')
      if [ -z "$jira_tickets" ]; then
        jira_tickets=""
      fi
      echo "RELATED_ISSUE=$jira_tickets" >> variables.env
      echo "Select Version:${RELEASE_VERSION_CORE} to update from $onlineTag JIRA_ISSUES=$jira_tickets"
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 2 week

extra_stg_publish:
  stage: release
  rules:
    - !reference [.qat_with_stg_rules, rules]
  needs:
    - job: extra_stg_prepare
  variables:
    TARGET_ENVIROMENT: "STG"
    ENVIROMENT_SUFFIX: "rc"
    RELEASE_VERSION_CORE: "$RELEASE_VERSION_CORE"
    PREVIOUS_VERSION: "$PREVIOUS_VERSION"
    RELATED_ISSUE: "$RELATED_ISSUE"
    HOTFIX_COMPARE: "null"
  trigger:
      include:
        - local: .app-release.yml

extra_pre_publish:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^([0-9]+\.[0-9]+\.[0-9]+)-(dev|rc)$/ && $CI_PIPELINE_SOURCE == "web" && $TARGET_ENVIROMENT == "PRO"
  needs: ["get_formal_release_version", "buildAndRelease"]
  variables:
    TARGET_ENVIROMENT: "PRE"
    ENVIROMENT_SUFFIX: "hotfix"
    RELEASE_VERSION_CORE: "$RELEASE_VERSION_CORE"
    PREVIOUS_VERSION: "$PREVIOUS_VERSION"
    HOTFIX_COMPARE: "null"
  trigger:
      include:
        - local: .app-release.yml

change_download_link:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^([0-9]+\.[0-9]+\.[0-9]+)-release|rc/ && $CI_PIPELINE_SOURCE == "web" && $UPDATE_LINK_VN
  script:
    - |
      echo "CI_COMMIT_TAG = $CI_COMMIT_TAG"
      PROGET_URL="https://proget.higgstar.com/upack/app/download/ios/kto-asia/${CI_COMMIT_TAG}?contentOnly=zip" 
      FILE_PATH='downloaded_package.zip'
      curl -L -o "${FILE_PATH}" "${PROGET_URL}"
      fileSizeBytes=$(stat -f%z "${FILE_PATH}")
      
      IPA_SIZE=$(echo "scale=2; ${fileSizeBytes}/(1024*1024)" | bc)
      RELEASE_VERSION_CORE=$(echo "$CI_COMMIT_TAG" | cut -d'-' -f1)
      
      if [[ "$CI_COMMIT_TAG" =~ \.([0-9]+)$ ]]; then
        NEXT_BUILD_NUMBER="${BASH_REMATCH[1]}"
        CURRENT_VERSION="${RELEASE_VERSION_CORE}(${NEXT_BUILD_NUMBER})"
      else
        NEXT_BUILD_NUMBER=1
        CURRENT_VERSION="${RELEASE_VERSION_CORE}"
      fi
      
      echo "RELEASE_VERSION_CORE = $RELEASE_VERSION_CORE"
      echo "NEXT_BUILD_NUMBER = $NEXT_BUILD_NUMBER"
      echo "UPDATE_LINK_VN = $UPDATE_LINK_VN"
      echo "IPA_SIZE = $IPA_SIZE"
      
      if [[ "$CI_COMMIT_TAG" =~ "rc" ]]; then
        DOWNLOAD_PAGE="$KTO_STG_HOST"
        publishNewIosVersion "[22,23]" "stage" "$RELEASE_VERSION_CORE" "$NEXT_BUILD_NUMBER" "$DOWNLOAD_URL_VN" "$DOWNLOAD_URL_VN" "$IPA_SIZE"
        message_payload=$(create_publish_notify "$CURRENT_VERSION" "stg" "$DOWNLOAD_PAGE")
      elif [ "$CI_COMMIT_TAG" =~ "release" ]; then
        DOWNLOAD_PAGE="$KTO_PRO_HOST"
        publishIosVersion "[183,244]" "prod" "$RELEASE_VERSION_CORE" "$NEXT_BUILD_NUMBER" "$DOWNLOAD_URL_VN" "$DOWNLOAD_URL_VN" "$IPA_SIZE"
        message_payload=$(create_publish_notify "$CURRENT_VERSION" "pro" "$DOWNLOAD_PAGE")
      else
        exit 1
      fi